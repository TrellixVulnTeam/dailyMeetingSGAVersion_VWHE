/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, TemplateRef } from '@angular/core';
import { FieldType } from '@ngx-formly/material/form-field';
import { MatInput } from '@angular/material/input';
import { MatDatepickerInput } from '@angular/material/datepicker';
var FormlyDatepickerTypeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(FormlyDatepickerTypeComponent, _super);
    function FormlyDatepickerTypeComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: {
                datepickerOptions: {
                    startView: 'month',
                    datepickerTogglePosition: 'suffix',
                    dateInput: (/**
                     * @return {?}
                     */
                    function () { }),
                    dateChange: (/**
                     * @return {?}
                     */
                    function () { }),
                    monthSelected: (/**
                     * @return {?}
                     */
                    function () { }),
                    yearSelected: (/**
                     * @return {?}
                     */
                    function () { }),
                },
            },
        };
        return _this;
    }
    /**
     * @return {?}
     */
    FormlyDatepickerTypeComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngAfterViewInit.call(this);
        // temporary fix for https://github.com/angular/material2/issues/6728
        ((/** @type {?} */ (this.datepickerInput)))._formField = this.formField;
        setTimeout((/**
         * @return {?}
         */
        function () {
            switch (_this.to.datepickerOptions.datepickerTogglePosition) {
                case 'suffix':
                    _this.to._matSuffix = _this.datepickerToggle;
                    break;
                case 'prefix':
                    _this.to._matPrefix = _this.datepickerToggle;
                    break;
            }
            ((/** @type {?} */ (_this.options)))._markForCheck(_this.field);
        }));
    };
    FormlyDatepickerTypeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field-mat-datepicker',
                    template: "\n    <input matInput\n      [id]=\"id\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [formControl]=\"formControl\"\n      [matDatepicker]=\"picker\"\n      [matDatepickerFilter]=\"to.datepickerOptions.filter\"\n      [max]=\"to.datepickerOptions.max\"\n      [min]=\"to.datepickerOptions.min\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"to.placeholder\"\n      [tabindex]=\"to.tabindex\"\n      [readonly]=\"to.readonly\"\n      [required]=\"to.required\"\n      (dateInput)=\"to.datepickerOptions.dateInput(field, $event)\"\n      (dateChange)=\"to.datepickerOptions.dateChange(field, $event)\">\n    <ng-template #datepickerToggle>\n      <mat-datepicker-toggle [disabled]=\"to.disabled\" [for]=\"picker\"></mat-datepicker-toggle>\n    </ng-template>\n    <mat-datepicker #picker\n      [color]=\"to.color\"\n      [dateClass]=\"to.datepickerOptions.dateClass\"\n      [disabled]=\"to.datepickerOptions.disabled\"\n      [opened]=\"to.datepickerOptions.opened\"\n      [panelClass]=\"to.datepickerOptions.panelClass\"\n      [startAt]=\"to.datepickerOptions.startAt\"\n      [startView]=\"to.datepickerOptions.startView\"\n      [touchUi]=\"to.datepickerOptions.touchUi\"\n      (monthSelected)=\"to.datepickerOptions.monthSelected(field, $event, picker)\"\n      (yearSelected)=\"to.datepickerOptions.yearSelected(field, $event, picker)\"\n    >\n    </mat-datepicker>\n  "
                }] }
    ];
    FormlyDatepickerTypeComponent.propDecorators = {
        formFieldControl: [{ type: ViewChild, args: [MatInput, (/** @type {?} */ ({ static: true })),] }],
        datepickerInput: [{ type: ViewChild, args: [MatDatepickerInput, (/** @type {?} */ ({ static: true })),] }],
        datepickerToggle: [{ type: ViewChild, args: ['datepickerToggle',] }]
    };
    return FormlyDatepickerTypeComponent;
}(FieldType));
export { FormlyDatepickerTypeComponent };
if (false) {
    /** @type {?} */
    FormlyDatepickerTypeComponent.prototype.formFieldControl;
    /** @type {?} */
    FormlyDatepickerTypeComponent.prototype.datepickerInput;
    /** @type {?} */
    FormlyDatepickerTypeComponent.prototype.datepickerToggle;
    /** @type {?} */
    FormlyDatepickerTypeComponent.prototype.defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci50eXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1mb3JtbHkvbWF0ZXJpYWwvZGF0ZXBpY2tlci8iLCJzb3VyY2VzIjpbImRhdGVwaWNrZXIudHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFpQixXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzVELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUVsRTtJQW9DbUQseURBQVM7SUFwQzVEO1FBQUEscUVBeUVDO1FBaENDLG9CQUFjLEdBQUc7WUFDZixlQUFlLEVBQUU7Z0JBQ2YsaUJBQWlCLEVBQUU7b0JBQ2pCLFNBQVMsRUFBRSxPQUFPO29CQUNsQix3QkFBd0IsRUFBRSxRQUFRO29CQUNsQyxTQUFTOzs7b0JBQUUsY0FBTyxDQUFDLENBQUE7b0JBQ25CLFVBQVU7OztvQkFBRSxjQUFPLENBQUMsQ0FBQTtvQkFDcEIsYUFBYTs7O29CQUFFLGNBQU8sQ0FBQyxDQUFBO29CQUN2QixZQUFZOzs7b0JBQUUsY0FBTyxDQUFDLENBQUE7aUJBQ3ZCO2FBQ0Y7U0FDRixDQUFDOztJQXFCSixDQUFDOzs7O0lBbkJDLHVEQUFlOzs7SUFBZjtRQUFBLGlCQWtCQztRQWpCQyxpQkFBTSxlQUFlLFdBQUUsQ0FBQztRQUN4QixxRUFBcUU7UUFDckUsQ0FBQyxtQkFBTSxJQUFJLENBQUMsZUFBZSxFQUFBLENBQUMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUV6RCxVQUFVOzs7UUFBQztZQUNULFFBQVEsS0FBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyx3QkFBd0IsRUFBRTtnQkFDMUQsS0FBSyxRQUFRO29CQUNYLEtBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxHQUFHLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQztvQkFDM0MsTUFBTTtnQkFFUixLQUFLLFFBQVE7b0JBQ1gsS0FBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEdBQUcsS0FBSSxDQUFDLGdCQUFnQixDQUFDO29CQUMzQyxNQUFNO2FBQ1Q7WUFFRCxDQUFDLG1CQUFNLEtBQUksQ0FBQyxPQUFPLEVBQUEsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakQsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOztnQkF4RUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSw2QkFBNkI7b0JBQ3ZDLFFBQVEsRUFBRSw2M0NBZ0NUO2lCQUNGOzs7bUNBRUUsU0FBUyxTQUFDLFFBQVEsRUFBRSxtQkFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBQTtrQ0FDMUMsU0FBUyxTQUFDLGtCQUFrQixFQUFFLG1CQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFBO21DQUNwRCxTQUFTLFNBQUMsa0JBQWtCOztJQWtDL0Isb0NBQUM7Q0FBQSxBQXpFRCxDQW9DbUQsU0FBUyxHQXFDM0Q7U0FyQ1ksNkJBQTZCOzs7SUFDeEMseURBQXlFOztJQUN6RSx3REFBaUc7O0lBQ2pHLHlEQUFtRTs7SUFFbkUsdURBV0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIFZpZXdDaGlsZCwgQWZ0ZXJWaWV3SW5pdCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgTWF0SW5wdXQgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pbnB1dCc7XG5pbXBvcnQgeyBNYXREYXRlcGlja2VySW5wdXQgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kYXRlcGlja2VyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9ybWx5LWZpZWxkLW1hdC1kYXRlcGlja2VyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8aW5wdXQgbWF0SW5wdXRcbiAgICAgIFtpZF09XCJpZFwiXG4gICAgICBbZXJyb3JTdGF0ZU1hdGNoZXJdPVwiZXJyb3JTdGF0ZU1hdGNoZXJcIlxuICAgICAgW2Zvcm1Db250cm9sXT1cImZvcm1Db250cm9sXCJcbiAgICAgIFttYXREYXRlcGlja2VyXT1cInBpY2tlclwiXG4gICAgICBbbWF0RGF0ZXBpY2tlckZpbHRlcl09XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5maWx0ZXJcIlxuICAgICAgW21heF09XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5tYXhcIlxuICAgICAgW21pbl09XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5taW5cIlxuICAgICAgW2Zvcm1seUF0dHJpYnV0ZXNdPVwiZmllbGRcIlxuICAgICAgW3BsYWNlaG9sZGVyXT1cInRvLnBsYWNlaG9sZGVyXCJcbiAgICAgIFt0YWJpbmRleF09XCJ0by50YWJpbmRleFwiXG4gICAgICBbcmVhZG9ubHldPVwidG8ucmVhZG9ubHlcIlxuICAgICAgW3JlcXVpcmVkXT1cInRvLnJlcXVpcmVkXCJcbiAgICAgIChkYXRlSW5wdXQpPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMuZGF0ZUlucHV0KGZpZWxkLCAkZXZlbnQpXCJcbiAgICAgIChkYXRlQ2hhbmdlKT1cInRvLmRhdGVwaWNrZXJPcHRpb25zLmRhdGVDaGFuZ2UoZmllbGQsICRldmVudClcIj5cbiAgICA8bmctdGVtcGxhdGUgI2RhdGVwaWNrZXJUb2dnbGU+XG4gICAgICA8bWF0LWRhdGVwaWNrZXItdG9nZ2xlIFtkaXNhYmxlZF09XCJ0by5kaXNhYmxlZFwiIFtmb3JdPVwicGlja2VyXCI+PC9tYXQtZGF0ZXBpY2tlci10b2dnbGU+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgICA8bWF0LWRhdGVwaWNrZXIgI3BpY2tlclxuICAgICAgW2NvbG9yXT1cInRvLmNvbG9yXCJcbiAgICAgIFtkYXRlQ2xhc3NdPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMuZGF0ZUNsYXNzXCJcbiAgICAgIFtkaXNhYmxlZF09XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5kaXNhYmxlZFwiXG4gICAgICBbb3BlbmVkXT1cInRvLmRhdGVwaWNrZXJPcHRpb25zLm9wZW5lZFwiXG4gICAgICBbcGFuZWxDbGFzc109XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5wYW5lbENsYXNzXCJcbiAgICAgIFtzdGFydEF0XT1cInRvLmRhdGVwaWNrZXJPcHRpb25zLnN0YXJ0QXRcIlxuICAgICAgW3N0YXJ0Vmlld109XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5zdGFydFZpZXdcIlxuICAgICAgW3RvdWNoVWldPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMudG91Y2hVaVwiXG4gICAgICAobW9udGhTZWxlY3RlZCk9XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5tb250aFNlbGVjdGVkKGZpZWxkLCAkZXZlbnQsIHBpY2tlcilcIlxuICAgICAgKHllYXJTZWxlY3RlZCk9XCJ0by5kYXRlcGlja2VyT3B0aW9ucy55ZWFyU2VsZWN0ZWQoZmllbGQsICRldmVudCwgcGlja2VyKVwiXG4gICAgPlxuICAgIDwvbWF0LWRhdGVwaWNrZXI+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seURhdGVwaWNrZXJUeXBlQ29tcG9uZW50IGV4dGVuZHMgRmllbGRUeXBlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIEBWaWV3Q2hpbGQoTWF0SW5wdXQsIDxhbnk+IHsgc3RhdGljOiB0cnVlIH0pIGZvcm1GaWVsZENvbnRyb2whOiBNYXRJbnB1dDtcbiAgQFZpZXdDaGlsZChNYXREYXRlcGlja2VySW5wdXQsIDxhbnk+IHsgc3RhdGljOiB0cnVlIH0pIGRhdGVwaWNrZXJJbnB1dCE6IE1hdERhdGVwaWNrZXJJbnB1dDxhbnk+O1xuICBAVmlld0NoaWxkKCdkYXRlcGlja2VyVG9nZ2xlJykgZGF0ZXBpY2tlclRvZ2dsZSE6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgdGVtcGxhdGVPcHRpb25zOiB7XG4gICAgICBkYXRlcGlja2VyT3B0aW9uczoge1xuICAgICAgICBzdGFydFZpZXc6ICdtb250aCcsXG4gICAgICAgIGRhdGVwaWNrZXJUb2dnbGVQb3NpdGlvbjogJ3N1ZmZpeCcsXG4gICAgICAgIGRhdGVJbnB1dDogKCkgPT4ge30sXG4gICAgICAgIGRhdGVDaGFuZ2U6ICgpID0+IHt9LFxuICAgICAgICBtb250aFNlbGVjdGVkOiAoKSA9PiB7fSxcbiAgICAgICAgeWVhclNlbGVjdGVkOiAoKSA9PiB7fSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgc3VwZXIubmdBZnRlclZpZXdJbml0KCk7XG4gICAgLy8gdGVtcG9yYXJ5IGZpeCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWwyL2lzc3Vlcy82NzI4XG4gICAgKDxhbnk+IHRoaXMuZGF0ZXBpY2tlcklucHV0KS5fZm9ybUZpZWxkID0gdGhpcy5mb3JtRmllbGQ7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHN3aXRjaCAodGhpcy50by5kYXRlcGlja2VyT3B0aW9ucy5kYXRlcGlja2VyVG9nZ2xlUG9zaXRpb24pIHtcbiAgICAgICAgY2FzZSAnc3VmZml4JzpcbiAgICAgICAgICB0aGlzLnRvLl9tYXRTdWZmaXggPSB0aGlzLmRhdGVwaWNrZXJUb2dnbGU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncHJlZml4JzpcbiAgICAgICAgICB0aGlzLnRvLl9tYXRQcmVmaXggPSB0aGlzLmRhdGVwaWNrZXJUb2dnbGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgICg8YW55PiB0aGlzLm9wdGlvbnMpLl9tYXJrRm9yQ2hlY2sodGhpcy5maWVsZCk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==