/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef } from '@angular/core';
import { FieldType } from '@ngx-formly/material/form-field';
import { MatInput } from '@angular/material/input';
import { MatDatepickerInput } from '@angular/material/datepicker';
export class FormlyDatepickerTypeComponent extends FieldType {
    constructor() {
        super(...arguments);
        this.defaultOptions = {
            templateOptions: {
                datepickerOptions: {
                    startView: 'month',
                    datepickerTogglePosition: 'suffix',
                    dateInput: (/**
                     * @return {?}
                     */
                    () => { }),
                    dateChange: (/**
                     * @return {?}
                     */
                    () => { }),
                    monthSelected: (/**
                     * @return {?}
                     */
                    () => { }),
                    yearSelected: (/**
                     * @return {?}
                     */
                    () => { }),
                },
            },
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
        // temporary fix for https://github.com/angular/material2/issues/6728
        ((/** @type {?} */ (this.datepickerInput)))._formField = this.formField;
        setTimeout((/**
         * @return {?}
         */
        () => {
            switch (this.to.datepickerOptions.datepickerTogglePosition) {
                case 'suffix':
                    this.to._matSuffix = this.datepickerToggle;
                    break;
                case 'prefix':
                    this.to._matPrefix = this.datepickerToggle;
                    break;
            }
            ((/** @type {?} */ (this.options)))._markForCheck(this.field);
        }));
    }
}
FormlyDatepickerTypeComponent.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-mat-datepicker',
                template: `
    <input matInput
      [id]="id"
      [errorStateMatcher]="errorStateMatcher"
      [formControl]="formControl"
      [matDatepicker]="picker"
      [matDatepickerFilter]="to.datepickerOptions.filter"
      [max]="to.datepickerOptions.max"
      [min]="to.datepickerOptions.min"
      [formlyAttributes]="field"
      [placeholder]="to.placeholder"
      [tabindex]="to.tabindex"
      [readonly]="to.readonly"
      [required]="to.required"
      (dateInput)="to.datepickerOptions.dateInput(field, $event)"
      (dateChange)="to.datepickerOptions.dateChange(field, $event)">
    <ng-template #datepickerToggle>
      <mat-datepicker-toggle [disabled]="to.disabled" [for]="picker"></mat-datepicker-toggle>
    </ng-template>
    <mat-datepicker #picker
      [color]="to.color"
      [dateClass]="to.datepickerOptions.dateClass"
      [disabled]="to.datepickerOptions.disabled"
      [opened]="to.datepickerOptions.opened"
      [panelClass]="to.datepickerOptions.panelClass"
      [startAt]="to.datepickerOptions.startAt"
      [startView]="to.datepickerOptions.startView"
      [touchUi]="to.datepickerOptions.touchUi"
      (monthSelected)="to.datepickerOptions.monthSelected(field, $event, picker)"
      (yearSelected)="to.datepickerOptions.yearSelected(field, $event, picker)"
    >
    </mat-datepicker>
  `
            }] }
];
FormlyDatepickerTypeComponent.propDecorators = {
    formFieldControl: [{ type: ViewChild, args: [MatInput, (/** @type {?} */ ({ static: true })),] }],
    datepickerInput: [{ type: ViewChild, args: [MatDatepickerInput, (/** @type {?} */ ({ static: true })),] }],
    datepickerToggle: [{ type: ViewChild, args: ['datepickerToggle',] }]
};
if (false) {
    /** @type {?} */
    FormlyDatepickerTypeComponent.prototype.formFieldControl;
    /** @type {?} */
    FormlyDatepickerTypeComponent.prototype.datepickerInput;
    /** @type {?} */
    FormlyDatepickerTypeComponent.prototype.datepickerToggle;
    /** @type {?} */
    FormlyDatepickerTypeComponent.prototype.defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci50eXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1mb3JtbHkvbWF0ZXJpYWwvZGF0ZXBpY2tlci8iLCJzb3VyY2VzIjpbImRhdGVwaWNrZXIudHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQWlCLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDNUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ25ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBc0NsRSxNQUFNLE9BQU8sNkJBQThCLFNBQVEsU0FBUztJQXBDNUQ7O1FBeUNFLG1CQUFjLEdBQUc7WUFDZixlQUFlLEVBQUU7Z0JBQ2YsaUJBQWlCLEVBQUU7b0JBQ2pCLFNBQVMsRUFBRSxPQUFPO29CQUNsQix3QkFBd0IsRUFBRSxRQUFRO29CQUNsQyxTQUFTOzs7b0JBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFBO29CQUNuQixVQUFVOzs7b0JBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFBO29CQUNwQixhQUFhOzs7b0JBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFBO29CQUN2QixZQUFZOzs7b0JBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFBO2lCQUN2QjthQUNGO1NBQ0YsQ0FBQztJQXFCSixDQUFDOzs7O0lBbkJDLGVBQWU7UUFDYixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIscUVBQXFFO1FBQ3JFLENBQUMsbUJBQU0sSUFBSSxDQUFDLGVBQWUsRUFBQSxDQUFDLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFFekQsVUFBVTs7O1FBQUMsR0FBRyxFQUFFO1lBQ2QsUUFBUSxJQUFJLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLHdCQUF3QixFQUFFO2dCQUMxRCxLQUFLLFFBQVE7b0JBQ1gsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO29CQUMzQyxNQUFNO2dCQUVSLEtBQUssUUFBUTtvQkFDWCxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7b0JBQzNDLE1BQU07YUFDVDtZQUVELENBQUMsbUJBQU0sSUFBSSxDQUFDLE9BQU8sRUFBQSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7OztZQXhFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDZCQUE2QjtnQkFDdkMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWdDVDthQUNGOzs7K0JBRUUsU0FBUyxTQUFDLFFBQVEsRUFBRSxtQkFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBQTs4QkFDMUMsU0FBUyxTQUFDLGtCQUFrQixFQUFFLG1CQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFBOytCQUNwRCxTQUFTLFNBQUMsa0JBQWtCOzs7O0lBRjdCLHlEQUF5RTs7SUFDekUsd0RBQWlHOztJQUNqRyx5REFBbUU7O0lBRW5FLHVEQVdFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3Q2hpbGQsIEFmdGVyVmlld0luaXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICdAbmd4LWZvcm1seS9tYXRlcmlhbC9mb3JtLWZpZWxkJztcbmltcG9ydCB7IE1hdElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvaW5wdXQnO1xuaW1wb3J0IHsgTWF0RGF0ZXBpY2tlcklucHV0IH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGF0ZXBpY2tlcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Zvcm1seS1maWVsZC1tYXQtZGF0ZXBpY2tlcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGlucHV0IG1hdElucHV0XG4gICAgICBbaWRdPVwiaWRcIlxuICAgICAgW2Vycm9yU3RhdGVNYXRjaGVyXT1cImVycm9yU3RhdGVNYXRjaGVyXCJcbiAgICAgIFtmb3JtQ29udHJvbF09XCJmb3JtQ29udHJvbFwiXG4gICAgICBbbWF0RGF0ZXBpY2tlcl09XCJwaWNrZXJcIlxuICAgICAgW21hdERhdGVwaWNrZXJGaWx0ZXJdPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMuZmlsdGVyXCJcbiAgICAgIFttYXhdPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMubWF4XCJcbiAgICAgIFttaW5dPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMubWluXCJcbiAgICAgIFtmb3JtbHlBdHRyaWJ1dGVzXT1cImZpZWxkXCJcbiAgICAgIFtwbGFjZWhvbGRlcl09XCJ0by5wbGFjZWhvbGRlclwiXG4gICAgICBbdGFiaW5kZXhdPVwidG8udGFiaW5kZXhcIlxuICAgICAgW3JlYWRvbmx5XT1cInRvLnJlYWRvbmx5XCJcbiAgICAgIFtyZXF1aXJlZF09XCJ0by5yZXF1aXJlZFwiXG4gICAgICAoZGF0ZUlucHV0KT1cInRvLmRhdGVwaWNrZXJPcHRpb25zLmRhdGVJbnB1dChmaWVsZCwgJGV2ZW50KVwiXG4gICAgICAoZGF0ZUNoYW5nZSk9XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5kYXRlQ2hhbmdlKGZpZWxkLCAkZXZlbnQpXCI+XG4gICAgPG5nLXRlbXBsYXRlICNkYXRlcGlja2VyVG9nZ2xlPlxuICAgICAgPG1hdC1kYXRlcGlja2VyLXRvZ2dsZSBbZGlzYWJsZWRdPVwidG8uZGlzYWJsZWRcIiBbZm9yXT1cInBpY2tlclwiPjwvbWF0LWRhdGVwaWNrZXItdG9nZ2xlPlxuICAgIDwvbmctdGVtcGxhdGU+XG4gICAgPG1hdC1kYXRlcGlja2VyICNwaWNrZXJcbiAgICAgIFtjb2xvcl09XCJ0by5jb2xvclwiXG4gICAgICBbZGF0ZUNsYXNzXT1cInRvLmRhdGVwaWNrZXJPcHRpb25zLmRhdGVDbGFzc1wiXG4gICAgICBbZGlzYWJsZWRdPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMuZGlzYWJsZWRcIlxuICAgICAgW29wZW5lZF09XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5vcGVuZWRcIlxuICAgICAgW3BhbmVsQ2xhc3NdPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMucGFuZWxDbGFzc1wiXG4gICAgICBbc3RhcnRBdF09XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5zdGFydEF0XCJcbiAgICAgIFtzdGFydFZpZXddPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMuc3RhcnRWaWV3XCJcbiAgICAgIFt0b3VjaFVpXT1cInRvLmRhdGVwaWNrZXJPcHRpb25zLnRvdWNoVWlcIlxuICAgICAgKG1vbnRoU2VsZWN0ZWQpPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMubW9udGhTZWxlY3RlZChmaWVsZCwgJGV2ZW50LCBwaWNrZXIpXCJcbiAgICAgICh5ZWFyU2VsZWN0ZWQpPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMueWVhclNlbGVjdGVkKGZpZWxkLCAkZXZlbnQsIHBpY2tlcilcIlxuICAgID5cbiAgICA8L21hdC1kYXRlcGlja2VyPlxuICBgLFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtbHlEYXRlcGlja2VyVHlwZUNvbXBvbmVudCBleHRlbmRzIEZpZWxkVHlwZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBAVmlld0NoaWxkKE1hdElucHV0LCA8YW55PiB7IHN0YXRpYzogdHJ1ZSB9KSBmb3JtRmllbGRDb250cm9sITogTWF0SW5wdXQ7XG4gIEBWaWV3Q2hpbGQoTWF0RGF0ZXBpY2tlcklucHV0LCA8YW55PiB7IHN0YXRpYzogdHJ1ZSB9KSBkYXRlcGlja2VySW5wdXQhOiBNYXREYXRlcGlja2VySW5wdXQ8YW55PjtcbiAgQFZpZXdDaGlsZCgnZGF0ZXBpY2tlclRvZ2dsZScpIGRhdGVwaWNrZXJUb2dnbGUhOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIGRlZmF1bHRPcHRpb25zID0ge1xuICAgIHRlbXBsYXRlT3B0aW9uczoge1xuICAgICAgZGF0ZXBpY2tlck9wdGlvbnM6IHtcbiAgICAgICAgc3RhcnRWaWV3OiAnbW9udGgnLFxuICAgICAgICBkYXRlcGlja2VyVG9nZ2xlUG9zaXRpb246ICdzdWZmaXgnLFxuICAgICAgICBkYXRlSW5wdXQ6ICgpID0+IHt9LFxuICAgICAgICBkYXRlQ2hhbmdlOiAoKSA9PiB7fSxcbiAgICAgICAgbW9udGhTZWxlY3RlZDogKCkgPT4ge30sXG4gICAgICAgIHllYXJTZWxlY3RlZDogKCkgPT4ge30sXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHN1cGVyLm5nQWZ0ZXJWaWV3SW5pdCgpO1xuICAgIC8vIHRlbXBvcmFyeSBmaXggZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsMi9pc3N1ZXMvNjcyOFxuICAgICg8YW55PiB0aGlzLmRhdGVwaWNrZXJJbnB1dCkuX2Zvcm1GaWVsZCA9IHRoaXMuZm9ybUZpZWxkO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBzd2l0Y2ggKHRoaXMudG8uZGF0ZXBpY2tlck9wdGlvbnMuZGF0ZXBpY2tlclRvZ2dsZVBvc2l0aW9uKSB7XG4gICAgICAgIGNhc2UgJ3N1ZmZpeCc6XG4gICAgICAgICAgdGhpcy50by5fbWF0U3VmZml4ID0gdGhpcy5kYXRlcGlja2VyVG9nZ2xlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3ByZWZpeCc6XG4gICAgICAgICAgdGhpcy50by5fbWF0UHJlZml4ID0gdGhpcy5kYXRlcGlja2VyVG9nZ2xlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAoPGFueT4gdGhpcy5vcHRpb25zKS5fbWFya0ZvckNoZWNrKHRoaXMuZmllbGQpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=