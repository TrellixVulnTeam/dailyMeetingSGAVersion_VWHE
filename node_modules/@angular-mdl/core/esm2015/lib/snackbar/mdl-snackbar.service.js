import { Component, ComponentFactoryResolver, Injectable, ViewEncapsulation, } from "@angular/core";
import { MdlDialogOutletService } from "../dialog-outlet/mdl-dialog-outlet.service";
import { Subject } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "../dialog-outlet/mdl-dialog-outlet.service";
const ANIMATION_TIME = 250;
export class MdlSnackbarComponent {
    constructor() {
        this.showIt = false;
    }
    onClick() {
        this.onAction();
    }
    isActive() {
        return this.showIt;
    }
    show() {
        const result = new Subject();
        // wait unit the dom is in place - then showIt will change the css class
        setTimeout(() => {
            this.showIt = true;
            // fire after the view animation is done
            setTimeout(() => {
                result.next();
                result.complete();
            }, ANIMATION_TIME);
        }, ANIMATION_TIME);
        return result.asObservable();
    }
    hide() {
        this.showIt = false;
        const result = new Subject();
        // fire after the view animation is done
        setTimeout(() => {
            result.next(null);
            result.complete();
        }, ANIMATION_TIME);
        return result.asObservable();
    }
}
MdlSnackbarComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-snackbar-component",
                template: `
    <div
      id="demo-toast-example"
      class=" mdl-snackbar"
      [ngClass]="{ 'mdl-snackbar--active': showIt }"
    >
      <div class="mdl-snackbar__text">{{ message }}</div>
      <button
        *ngIf="onAction"
        class="mdl-snackbar__action"
        type="button"
        (click)="onClick()"
      >
        {{ actionText }}
      </button>
    </div>
  `,
                encapsulation: ViewEncapsulation.None
            },] }
];
export class MdlSnackbarService {
    constructor(componentFactoryResolver, dialogOutletService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.dialogOutletService = dialogOutletService;
        this.cFactory = this.componentFactoryResolver.resolveComponentFactory(MdlSnackbarComponent);
    }
    showToast(message, timeout) {
        return this.showSnackbar({
            message,
            timeout,
        });
    }
    showSnackbar(snackbarMessage) {
        const optTimeout = snackbarMessage.timeout || 2750;
        const closeAfterTimeout = !!snackbarMessage.closeAfterTimeout;
        const viewContainerRef = this.dialogOutletService.viewContainerRef;
        if (!viewContainerRef) {
            throw new Error("You did not provide a ViewContainerRef. " +
                "Please see https://github.com/mseemann/angular2-mdl/wiki/How-to-use-the-MdlDialogService");
        }
        const cRef = viewContainerRef.createComponent(this.cFactory, viewContainerRef.length);
        const mdlSnackbarComponent = cRef.instance;
        mdlSnackbarComponent.message = snackbarMessage.message;
        if (this.previousSnack) {
            const previousSnack = this.previousSnack;
            const subscription = previousSnack.component.hide().subscribe(() => {
                previousSnack.cRef.destroy();
                subscription.unsubscribe();
            });
        }
        this.previousSnack = {
            component: mdlSnackbarComponent,
            cRef,
        };
        if (snackbarMessage.action) {
            if (closeAfterTimeout) {
                this.hideAndDestroySnack(mdlSnackbarComponent, cRef, optTimeout);
            }
            mdlSnackbarComponent.actionText = snackbarMessage.action.text;
            mdlSnackbarComponent.onAction = () => {
                mdlSnackbarComponent.hide().subscribe(() => {
                    cRef.destroy();
                    snackbarMessage.action.handler();
                });
            };
        }
        else {
            this.hideAndDestroySnack(mdlSnackbarComponent, cRef, optTimeout);
        }
        const result = new Subject();
        mdlSnackbarComponent.show().subscribe(() => {
            result.next(mdlSnackbarComponent);
            result.complete();
        });
        return result.asObservable();
    }
    hideAndDestroySnack(component, componentRef, timeOut) {
        setTimeout(() => {
            component.hide().subscribe(() => {
                componentRef.destroy();
            });
        }, timeOut);
    }
}
MdlSnackbarService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MdlSnackbarService_Factory() { return new MdlSnackbarService(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i1.MdlDialogOutletService)); }, token: MdlSnackbarService, providedIn: "root" });
MdlSnackbarService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root",
            },] }
];
MdlSnackbarService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: MdlDialogOutletService }
];
//# sourceMappingURL=data:application/json;base64,