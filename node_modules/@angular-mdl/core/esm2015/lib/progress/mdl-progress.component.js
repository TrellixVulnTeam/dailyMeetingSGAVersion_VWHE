import { ChangeDetectionStrategy, Component, HostBinding, Input, ViewEncapsulation, } from "@angular/core";
import { toBoolean } from "../common/boolean-property";
export class MdlProgressComponent {
    constructor() {
        this.progress = 0;
        this.buffer = 100;
        this.aux = 0;
        this.isProgess = true;
        this.indeterminateIntern = false;
    }
    get indeterminate() {
        return this.indeterminateIntern;
    }
    set indeterminate(value) {
        this.indeterminateIntern = toBoolean(value);
    }
    ngOnChanges(changes) {
        if (changes.buffer) {
            this.setBuffer(changes.buffer.currentValue);
        }
    }
    setBuffer(b) {
        this.aux = 100 - b;
    }
}
MdlProgressComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-progress",
                template: `
    <div class="progressbar bar bar1" [style.width]="progress + '%'"></div>
    <div class="bufferbar bar bar2" [style.width]="buffer + '%'"></div>
    <div class="auxbar bar bar3" [ngStyle]="{ width: aux + '%' }"></div>
  `,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
MdlProgressComponent.propDecorators = {
    progress: [{ type: Input }],
    buffer: [{ type: Input }],
    aux: [{ type: Input }],
    isProgess: [{ type: HostBinding, args: ["class.mdl-progress",] }],
    indeterminate: [{ type: HostBinding, args: ["class.mdl-progress__indeterminate",] }, { type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRsLXByb2dyZXNzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL2xpYi9wcm9ncmVzcy9tZGwtcHJvZ3Jlc3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBR0wsaUJBQWlCLEdBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQVl2RCxNQUFNLE9BQU8sb0JBQW9CO0lBVmpDO1FBV1csYUFBUSxHQUFHLENBQUMsQ0FBQztRQUNiLFdBQU0sR0FBRyxHQUFHLENBQUM7UUFDYixRQUFHLEdBQUcsQ0FBQyxDQUFDO1FBR2pCLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFFVCx3QkFBbUIsR0FBRyxLQUFLLENBQUM7SUFxQnRDLENBQUM7SUFuQkMsSUFFSSxhQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUksYUFBYSxDQUFDLEtBQWM7UUFDOUIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDN0M7SUFDSCxDQUFDO0lBRU8sU0FBUyxDQUFDLENBQVM7UUFDekIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7OztZQXRDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLFFBQVEsRUFBRTs7OztHQUlUO2dCQUNELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7O3VCQUVFLEtBQUs7cUJBQ0wsS0FBSztrQkFDTCxLQUFLO3dCQUVMLFdBQVcsU0FBQyxvQkFBb0I7NEJBS2hDLFdBQVcsU0FBQyxtQ0FBbUMsY0FDL0MsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gXCIuLi9jb21tb24vYm9vbGVhbi1wcm9wZXJ0eVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwibWRsLXByb2dyZXNzXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cInByb2dyZXNzYmFyIGJhciBiYXIxXCIgW3N0eWxlLndpZHRoXT1cInByb2dyZXNzICsgJyUnXCI+PC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImJ1ZmZlcmJhciBiYXIgYmFyMlwiIFtzdHlsZS53aWR0aF09XCJidWZmZXIgKyAnJSdcIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiYXV4YmFyIGJhciBiYXIzXCIgW25nU3R5bGVdPVwieyB3aWR0aDogYXV4ICsgJyUnIH1cIj48L2Rpdj5cbiAgYCxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIE1kbFByb2dyZXNzQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgcHJvZ3Jlc3MgPSAwO1xuICBASW5wdXQoKSBidWZmZXIgPSAxMDA7XG4gIEBJbnB1dCgpIGF1eCA9IDA7XG5cbiAgQEhvc3RCaW5kaW5nKFwiY2xhc3MubWRsLXByb2dyZXNzXCIpXG4gIGlzUHJvZ2VzcyA9IHRydWU7XG5cbiAgcHJpdmF0ZSBpbmRldGVybWluYXRlSW50ZXJuID0gZmFsc2U7XG5cbiAgQEhvc3RCaW5kaW5nKFwiY2xhc3MubWRsLXByb2dyZXNzX19pbmRldGVybWluYXRlXCIpXG4gIEBJbnB1dCgpXG4gIGdldCBpbmRldGVybWluYXRlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmluZGV0ZXJtaW5hdGVJbnRlcm47XG4gIH1cblxuICBzZXQgaW5kZXRlcm1pbmF0ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuaW5kZXRlcm1pbmF0ZUludGVybiA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMuYnVmZmVyKSB7XG4gICAgICB0aGlzLnNldEJ1ZmZlcihjaGFuZ2VzLmJ1ZmZlci5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0QnVmZmVyKGI6IG51bWJlcikge1xuICAgIHRoaXMuYXV4ID0gMTAwIC0gYjtcbiAgfVxufVxuIl19