import { Component, ContentChildren, EventEmitter, HostBinding, Input, Output, QueryList, ViewEncapsulation, } from "@angular/core";
import { MdlTabPanelComponent } from "./mdl-tab-panel.component";
import { toNumber } from "../common/number.property";
import { toBoolean } from "../common/boolean-property";
export class MdlTabsComponent {
    constructor() {
        // eslint-disable-next-line
        this.selectedTabEmitter = new EventEmitter();
        this.isTabs = true;
        this.isUpgraded = true;
        this.selectedIndexIntern = 0;
        this.isRippleIntern = false;
    }
    get selectedIndex() {
        return this.selectedIndexIntern;
    }
    set selectedIndex(value) {
        this.selectedIndexIntern = toNumber(value);
    }
    get isRipple() {
        return this.isRippleIntern;
    }
    set isRipple(value) {
        this.isRippleIntern = toBoolean(value);
    }
    ngAfterContentInit() {
        // the initial tabs
        this.updateSelectedTabIndex();
        // listen to tab changes - this would not be necessary if this would be fixed:
        // https://github.com/angular/angular/issues/12818
        this.tabs.changes.subscribe(() => {
            this.updateSelectedTabIndex();
        });
    }
    ngOnChanges(changes) {
        if (changes.selectedIndex) {
            this.updateSelectedTabIndex();
        }
    }
    tabSelected(tab) {
        if (tab.disabled) {
            return;
        }
        const index = this.tabs.toArray().indexOf(tab);
        if (index !== this.selectedIndex) {
            this.selectedIndex = index;
            this.updateSelectedTabIndex();
            this.selectedTabEmitter.emit({ index: this.selectedIndex });
        }
    }
    updateSelectedTabIndex() {
        if (this.tabs) {
            // https://github.com/angular/angular/issues/6005
            // this would not be necessare if this would be fixed: https://github.com/angular/angular/issues/12818
            setTimeout(() => {
                this.tabs.forEach((tab, idx) => {
                    tab.isActive = this.selectedIndex === idx;
                });
            }, 1);
        }
    }
}
MdlTabsComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-tabs",
                template: `
    <div class="mdl-tabs__tab-bar">
      <div *ngFor="let tab of tabs.toArray()">
        <div
          *ngIf="tab.titleComponent"
          class="mdl-tabs__tab"
          (click)="tabSelected(tab)"
          [mdl-ripple]="isRipple && !tab.disabled"
          [ngClass]="{ 'is-active': tab.isActive, disabled: tab.disabled }"
          [append-view-container-ref]="tab.titleComponent.vcRef"
        ></div>
        <a
          *ngIf="!tab.titleComponent"
          href="javascript:void(0)"
          (click)="tabSelected(tab)"
          class="mdl-tabs__tab"
          [mdl-ripple]="isRipple && !tab.disabled"
          [ngClass]="{ 'is-active': tab.isActive, disabled: tab.disabled }"
          >{{ tab.title }}</a
        >
      </div>
    </div>
    <ng-content></ng-content>
  `,
                encapsulation: ViewEncapsulation.None
            },] }
];
MdlTabsComponent.propDecorators = {
    selectedTabEmitter: [{ type: Output, args: ['mdl-tab-active-changed',] }],
    tabs: [{ type: ContentChildren, args: [MdlTabPanelComponent,] }],
    isTabs: [{ type: HostBinding, args: ["class.mdl-tabs",] }],
    isUpgraded: [{ type: HostBinding, args: ["class.is-upgraded",] }],
    selectedIndex: [{ type: Input, args: ["mdl-tab-active-index",] }],
    isRipple: [{ type: Input, args: ["mdl-ripple",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRsLXRhYnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvbGliL3RhYnMvbWRsLXRhYnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxTQUFTLEVBQ1QsZUFBZSxFQUNmLFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxFQUVMLE1BQU0sRUFDTixTQUFTLEVBRVQsaUJBQWlCLEdBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUE4QnZELE1BQU0sT0FBTyxnQkFBZ0I7SUE1QjdCO1FBNkJFLDJCQUEyQjtRQUUzQix1QkFBa0IsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBS3hDLFdBQU0sR0FBRyxJQUFJLENBQUM7UUFFZCxlQUFVLEdBQUcsSUFBSSxDQUFDO1FBRVYsd0JBQW1CLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLG1CQUFjLEdBQUcsS0FBSyxDQUFDO0lBNERqQyxDQUFDO0lBMURDLElBQ0ksYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDO0lBQ2xDLENBQUM7SUFFRCxJQUFJLGFBQWEsQ0FBQyxLQUFhO1FBQzdCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELElBQ0ksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBSSxRQUFRLENBQUMsS0FBYztRQUN6QixJQUFJLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLG1CQUFtQjtRQUNuQixJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUM5Qiw4RUFBOEU7UUFDOUUsa0RBQWtEO1FBQ2xELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDL0IsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLGFBQWEsRUFBRTtZQUN6QixJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFRCxXQUFXLENBQUMsR0FBeUI7UUFDbkMsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFO1lBQ2hCLE9BQU87U0FDUjtRQUVELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9DLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7WUFDM0IsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztTQUM3RDtJQUNILENBQUM7SUFFTyxzQkFBc0I7UUFDNUIsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsaURBQWlEO1lBQ2pELHNHQUFzRztZQUN0RyxVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO29CQUM3QixHQUFHLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxhQUFhLEtBQUssR0FBRyxDQUFDO2dCQUM1QyxDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNQO0lBQ0gsQ0FBQzs7O1lBcEdGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsVUFBVTtnQkFDcEIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXVCVDtnQkFDRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTthQUN0Qzs7O2lDQUdFLE1BQU0sU0FBQyx3QkFBd0I7bUJBRS9CLGVBQWUsU0FBQyxvQkFBb0I7cUJBR3BDLFdBQVcsU0FBQyxnQkFBZ0I7eUJBRTVCLFdBQVcsU0FBQyxtQkFBbUI7NEJBTS9CLEtBQUssU0FBQyxzQkFBc0I7dUJBUzVCLEtBQUssU0FBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE91dHB1dCxcbiAgUXVlcnlMaXN0LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgTWRsVGFiUGFuZWxDb21wb25lbnQgfSBmcm9tIFwiLi9tZGwtdGFiLXBhbmVsLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgdG9OdW1iZXIgfSBmcm9tIFwiLi4vY29tbW9uL251bWJlci5wcm9wZXJ0eVwiO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSBcIi4uL2NvbW1vbi9ib29sZWFuLXByb3BlcnR5XCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJtZGwtdGFic1wiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgY2xhc3M9XCJtZGwtdGFic19fdGFiLWJhclwiPlxuICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgdGFiIG9mIHRhYnMudG9BcnJheSgpXCI+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICAqbmdJZj1cInRhYi50aXRsZUNvbXBvbmVudFwiXG4gICAgICAgICAgY2xhc3M9XCJtZGwtdGFic19fdGFiXCJcbiAgICAgICAgICAoY2xpY2spPVwidGFiU2VsZWN0ZWQodGFiKVwiXG4gICAgICAgICAgW21kbC1yaXBwbGVdPVwiaXNSaXBwbGUgJiYgIXRhYi5kaXNhYmxlZFwiXG4gICAgICAgICAgW25nQ2xhc3NdPVwieyAnaXMtYWN0aXZlJzogdGFiLmlzQWN0aXZlLCBkaXNhYmxlZDogdGFiLmRpc2FibGVkIH1cIlxuICAgICAgICAgIFthcHBlbmQtdmlldy1jb250YWluZXItcmVmXT1cInRhYi50aXRsZUNvbXBvbmVudC52Y1JlZlwiXG4gICAgICAgID48L2Rpdj5cbiAgICAgICAgPGFcbiAgICAgICAgICAqbmdJZj1cIiF0YWIudGl0bGVDb21wb25lbnRcIlxuICAgICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIlxuICAgICAgICAgIChjbGljayk9XCJ0YWJTZWxlY3RlZCh0YWIpXCJcbiAgICAgICAgICBjbGFzcz1cIm1kbC10YWJzX190YWJcIlxuICAgICAgICAgIFttZGwtcmlwcGxlXT1cImlzUmlwcGxlICYmICF0YWIuZGlzYWJsZWRcIlxuICAgICAgICAgIFtuZ0NsYXNzXT1cInsgJ2lzLWFjdGl2ZSc6IHRhYi5pc0FjdGl2ZSwgZGlzYWJsZWQ6IHRhYi5kaXNhYmxlZCB9XCJcbiAgICAgICAgICA+e3sgdGFiLnRpdGxlIH19PC9hXG4gICAgICAgID5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgYCxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgTWRsVGFic0NvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uQ2hhbmdlcyB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBAT3V0cHV0KCdtZGwtdGFiLWFjdGl2ZS1jaGFuZ2VkJylcbiAgc2VsZWN0ZWRUYWJFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAQ29udGVudENoaWxkcmVuKE1kbFRhYlBhbmVsQ29tcG9uZW50KVxuICB0YWJzOiBRdWVyeUxpc3Q8TWRsVGFiUGFuZWxDb21wb25lbnQ+O1xuXG4gIEBIb3N0QmluZGluZyhcImNsYXNzLm1kbC10YWJzXCIpXG4gIGlzVGFicyA9IHRydWU7XG4gIEBIb3N0QmluZGluZyhcImNsYXNzLmlzLXVwZ3JhZGVkXCIpXG4gIGlzVXBncmFkZWQgPSB0cnVlO1xuXG4gIHByaXZhdGUgc2VsZWN0ZWRJbmRleEludGVybiA9IDA7XG4gIHByaXZhdGUgaXNSaXBwbGVJbnRlcm4gPSBmYWxzZTtcblxuICBASW5wdXQoXCJtZGwtdGFiLWFjdGl2ZS1pbmRleFwiKVxuICBnZXQgc2VsZWN0ZWRJbmRleCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdGVkSW5kZXhJbnRlcm47XG4gIH1cblxuICBzZXQgc2VsZWN0ZWRJbmRleCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5zZWxlY3RlZEluZGV4SW50ZXJuID0gdG9OdW1iZXIodmFsdWUpO1xuICB9XG5cbiAgQElucHV0KFwibWRsLXJpcHBsZVwiKVxuICBnZXQgaXNSaXBwbGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNSaXBwbGVJbnRlcm47XG4gIH1cblxuICBzZXQgaXNSaXBwbGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmlzUmlwcGxlSW50ZXJuID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICAvLyB0aGUgaW5pdGlhbCB0YWJzXG4gICAgdGhpcy51cGRhdGVTZWxlY3RlZFRhYkluZGV4KCk7XG4gICAgLy8gbGlzdGVuIHRvIHRhYiBjaGFuZ2VzIC0gdGhpcyB3b3VsZCBub3QgYmUgbmVjZXNzYXJ5IGlmIHRoaXMgd291bGQgYmUgZml4ZWQ6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTI4MThcbiAgICB0aGlzLnRhYnMuY2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZFRhYkluZGV4KCk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMuc2VsZWN0ZWRJbmRleCkge1xuICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZFRhYkluZGV4KCk7XG4gICAgfVxuICB9XG5cbiAgdGFiU2VsZWN0ZWQodGFiOiBNZGxUYWJQYW5lbENvbXBvbmVudCk6IHZvaWQge1xuICAgIGlmICh0YWIuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpbmRleCA9IHRoaXMudGFicy50b0FycmF5KCkuaW5kZXhPZih0YWIpO1xuICAgIGlmIChpbmRleCAhPT0gdGhpcy5zZWxlY3RlZEluZGV4KSB7XG4gICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSBpbmRleDtcbiAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRUYWJJbmRleCgpO1xuICAgICAgdGhpcy5zZWxlY3RlZFRhYkVtaXR0ZXIuZW1pdCh7IGluZGV4OiB0aGlzLnNlbGVjdGVkSW5kZXggfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVTZWxlY3RlZFRhYkluZGV4KCkge1xuICAgIGlmICh0aGlzLnRhYnMpIHtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzYwMDVcbiAgICAgIC8vIHRoaXMgd291bGQgbm90IGJlIG5lY2Vzc2FyZSBpZiB0aGlzIHdvdWxkIGJlIGZpeGVkOiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8xMjgxOFxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMudGFicy5mb3JFYWNoKCh0YWIsIGlkeCkgPT4ge1xuICAgICAgICAgIHRhYi5pc0FjdGl2ZSA9IHRoaXMuc2VsZWN0ZWRJbmRleCA9PT0gaWR4O1xuICAgICAgICB9KTtcbiAgICAgIH0sIDEpO1xuICAgIH1cbiAgfVxufVxuIl19