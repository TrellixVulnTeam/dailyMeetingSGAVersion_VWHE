import { Component, EventEmitter, Input, Output, ViewEncapsulation, } from "@angular/core";
export class MdlDefaultTableModel {
    constructor(columns) {
        this.data = [];
        this.columns = columns;
    }
    addAll(data) {
        this.data.push(...data);
    }
}
const template = `
        <table class="mdl-data-table">
           <thead>
           <tr>
              <th *ngIf="selectable">
                 <mdl-checkbox mdl-ripple [ngModel]="isAllSelected()" (ngModelChange)="toogleAll()"></mdl-checkbox>
              </th>
              <th *ngFor="let column of model.columns"
                  [ngClass]="{'mdl-data-table__cell--non-numeric': !column.numeric}">
                 {{column.name}}
              </th>
           </tr>
           </thead>
           <tbody>
           <tr *ngFor="let data of model.data; let i = index" [ngClass]="{'is-selected': selectable && data.selected}">
              <td *ngIf="selectable">
                 <mdl-checkbox mdl-ripple
                      [(ngModel)]="data.selected"
                      (ngModelChange)="selectionChanged()"></mdl-checkbox>
              </td>
              <td *ngFor="let column of model.columns"
                  [ngClass]="{'mdl-data-table__cell--non-numeric': !column.numeric}"
                  [innerHTML]="data[column.key]">
              </td>
           </tr>
           </tbody>
        </table>
    `;
const styles = `
    :host{
      display:inline-block;
    }
    `;
export class MdlTableComponent {
    constructor() {
        this.selectable = false;
    }
    isAllSelected() {
        return false;
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    toogleAll() { }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    selectionChanged() { }
}
MdlTableComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-table",
                template,
                encapsulation: ViewEncapsulation.None,
                styles: [styles]
            },] }
];
MdlTableComponent.propDecorators = {
    model: [{ type: Input, args: ['table-model',] }]
};
export class MdlSelectableTableComponent extends MdlTableComponent {
    constructor() {
        super(...arguments);
        // eslint-disable-next-line
        this.selectionChange = new EventEmitter();
        this.selectable = true;
        this.allSelected = false;
    }
    isAllSelected() {
        return this.model.data.every((data) => data.selected);
    }
    toogleAll() {
        const selected = !this.isAllSelected();
        this.model.data.forEach((data) => (data.selected = selected));
        this.updateSelected();
    }
    selectionChanged() {
        this.updateSelected();
    }
    updateSelected() {
        this.selected = this.model.data.filter((data) => data.selected);
        this.selectionChange.emit({ value: this.selected });
    }
}
MdlSelectableTableComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-table-selectable",
                template,
                encapsulation: ViewEncapsulation.None,
                styles: [styles]
            },] }
];
MdlSelectableTableComponent.propDecorators = {
    model: [{ type: Input, args: ['table-model',] }],
    selected: [{ type: Input, args: ['table-model-selected',] }],
    selectionChange: [{ type: Output, args: ['table-model-selectionChanged',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRsLXRhYmxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL2xpYi90YWJsZS9tZGwtdGFibGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBQ04saUJBQWlCLEdBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBaUJ2QixNQUFNLE9BQU8sb0JBQW9CO0lBSS9CLFlBQVksT0FBMEI7UUFGL0IsU0FBSSxHQUF5QixFQUFFLENBQUM7UUFHckMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUEwQjtRQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUM7Q0FDRjtBQUVELE1BQU0sUUFBUSxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0EyQlosQ0FBQztBQUVOLE1BQU0sTUFBTSxHQUFHOzs7O0tBSVYsQ0FBQztBQVFOLE1BQU0sT0FBTyxpQkFBaUI7SUFOOUI7UUFXRSxlQUFVLEdBQUcsS0FBSyxDQUFDO0lBV3JCLENBQUM7SUFUQyxhQUFhO1FBQ1gsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsZ0VBQWdFO0lBQ2hFLFNBQVMsS0FBVSxDQUFDO0lBRXBCLGdFQUFnRTtJQUNoRSxnQkFBZ0IsS0FBVSxDQUFDOzs7WUFyQjVCLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsV0FBVztnQkFDckIsUUFBUTtnQkFFUixhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTt5QkFENUIsTUFBTTthQUVoQjs7O29CQUdFLEtBQUssU0FBQyxhQUFhOztBQXNCdEIsTUFBTSxPQUFPLDJCQUE0QixTQUFRLGlCQUFpQjtJQU5sRTs7UUFhRSwyQkFBMkI7UUFFM0Isb0JBQWUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTlCLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFDbEIsZ0JBQVcsR0FBRyxLQUFLLENBQUM7SUFvQjdCLENBQUM7SUFsQkMsYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELFNBQVM7UUFDUCxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN2QyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFTyxjQUFjO1FBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDdEQsQ0FBQzs7O1lBckNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyxRQUFRO2dCQUVSLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO3lCQUQ1QixNQUFNO2FBRWhCOzs7b0JBR0UsS0FBSyxTQUFDLGFBQWE7dUJBR25CLEtBQUssU0FBQyxzQkFBc0I7OEJBRzVCLE1BQU0sU0FBQyw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1kbFRhYmxlQ29sdW1uIHtcbiAga2V5OiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgbnVtZXJpYz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1kbFRhYmxlTW9kZWxJdGVtIHtcbiAgc2VsZWN0ZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1kbFRhYmxlTW9kZWwge1xuICBjb2x1bW5zOiBJTWRsVGFibGVDb2x1bW5bXTtcbiAgZGF0YTogSU1kbFRhYmxlTW9kZWxJdGVtW107XG59XG5cbmV4cG9ydCBjbGFzcyBNZGxEZWZhdWx0VGFibGVNb2RlbCBpbXBsZW1lbnRzIElNZGxUYWJsZU1vZGVsIHtcbiAgcHVibGljIGNvbHVtbnM6IElNZGxUYWJsZUNvbHVtbltdO1xuICBwdWJsaWMgZGF0YTogSU1kbFRhYmxlTW9kZWxJdGVtW10gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihjb2x1bW5zOiBJTWRsVGFibGVDb2x1bW5bXSkge1xuICAgIHRoaXMuY29sdW1ucyA9IGNvbHVtbnM7XG4gIH1cblxuICBhZGRBbGwoZGF0YTogSU1kbFRhYmxlTW9kZWxJdGVtW10pOiB2b2lkIHtcbiAgICB0aGlzLmRhdGEucHVzaCguLi5kYXRhKTtcbiAgfVxufVxuXG5jb25zdCB0ZW1wbGF0ZSA9IGBcbiAgICAgICAgPHRhYmxlIGNsYXNzPVwibWRsLWRhdGEtdGFibGVcIj5cbiAgICAgICAgICAgPHRoZWFkPlxuICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0aCAqbmdJZj1cInNlbGVjdGFibGVcIj5cbiAgICAgICAgICAgICAgICAgPG1kbC1jaGVja2JveCBtZGwtcmlwcGxlIFtuZ01vZGVsXT1cImlzQWxsU2VsZWN0ZWQoKVwiIChuZ01vZGVsQ2hhbmdlKT1cInRvb2dsZUFsbCgpXCI+PC9tZGwtY2hlY2tib3g+XG4gICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgIDx0aCAqbmdGb3I9XCJsZXQgY29sdW1uIG9mIG1vZGVsLmNvbHVtbnNcIlxuICAgICAgICAgICAgICAgICAgW25nQ2xhc3NdPVwieydtZGwtZGF0YS10YWJsZV9fY2VsbC0tbm9uLW51bWVyaWMnOiAhY29sdW1uLm51bWVyaWN9XCI+XG4gICAgICAgICAgICAgICAgIHt7Y29sdW1uLm5hbWV9fVxuICAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgIDx0ciAqbmdGb3I9XCJsZXQgZGF0YSBvZiBtb2RlbC5kYXRhOyBsZXQgaSA9IGluZGV4XCIgW25nQ2xhc3NdPVwieydpcy1zZWxlY3RlZCc6IHNlbGVjdGFibGUgJiYgZGF0YS5zZWxlY3RlZH1cIj5cbiAgICAgICAgICAgICAgPHRkICpuZ0lmPVwic2VsZWN0YWJsZVwiPlxuICAgICAgICAgICAgICAgICA8bWRsLWNoZWNrYm94IG1kbC1yaXBwbGVcbiAgICAgICAgICAgICAgICAgICAgICBbKG5nTW9kZWwpXT1cImRhdGEuc2VsZWN0ZWRcIlxuICAgICAgICAgICAgICAgICAgICAgIChuZ01vZGVsQ2hhbmdlKT1cInNlbGVjdGlvbkNoYW5nZWQoKVwiPjwvbWRsLWNoZWNrYm94PlxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICA8dGQgKm5nRm9yPVwibGV0IGNvbHVtbiBvZiBtb2RlbC5jb2x1bW5zXCJcbiAgICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cInsnbWRsLWRhdGEtdGFibGVfX2NlbGwtLW5vbi1udW1lcmljJzogIWNvbHVtbi5udW1lcmljfVwiXG4gICAgICAgICAgICAgICAgICBbaW5uZXJIVE1MXT1cImRhdGFbY29sdW1uLmtleV1cIj5cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICBgO1xuXG5jb25zdCBzdHlsZXMgPSBgXG4gICAgOmhvc3R7XG4gICAgICBkaXNwbGF5OmlubGluZS1ibG9jaztcbiAgICB9XG4gICAgYDtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcIm1kbC10YWJsZVwiLFxuICB0ZW1wbGF0ZSxcbiAgc3R5bGVzOiBbc3R5bGVzXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgTWRsVGFibGVDb21wb25lbnQge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgQElucHV0KCd0YWJsZS1tb2RlbCcpXG4gIG1vZGVsOiBJTWRsVGFibGVNb2RlbDtcblxuICBzZWxlY3RhYmxlID0gZmFsc2U7XG5cbiAgaXNBbGxTZWxlY3RlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gIHRvb2dsZUFsbCgpOiB2b2lkIHt9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICBzZWxlY3Rpb25DaGFuZ2VkKCk6IHZvaWQge31cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcIm1kbC10YWJsZS1zZWxlY3RhYmxlXCIsXG4gIHRlbXBsYXRlLFxuICBzdHlsZXM6IFtzdHlsZXNdLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxufSlcbmV4cG9ydCBjbGFzcyBNZGxTZWxlY3RhYmxlVGFibGVDb21wb25lbnQgZXh0ZW5kcyBNZGxUYWJsZUNvbXBvbmVudCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBASW5wdXQoJ3RhYmxlLW1vZGVsJylcbiAgbW9kZWw6IElNZGxUYWJsZU1vZGVsO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgQElucHV0KCd0YWJsZS1tb2RlbC1zZWxlY3RlZCcpXG4gIHNlbGVjdGVkOiBJTWRsVGFibGVNb2RlbEl0ZW1bXTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIEBPdXRwdXQoJ3RhYmxlLW1vZGVsLXNlbGVjdGlvbkNoYW5nZWQnKVxuICBzZWxlY3Rpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcHVibGljIHNlbGVjdGFibGUgPSB0cnVlO1xuICBwdWJsaWMgYWxsU2VsZWN0ZWQgPSBmYWxzZTtcblxuICBpc0FsbFNlbGVjdGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm1vZGVsLmRhdGEuZXZlcnkoKGRhdGEpID0+IGRhdGEuc2VsZWN0ZWQpO1xuICB9XG5cbiAgdG9vZ2xlQWxsKCk6IHZvaWQge1xuICAgIGNvbnN0IHNlbGVjdGVkID0gIXRoaXMuaXNBbGxTZWxlY3RlZCgpO1xuICAgIHRoaXMubW9kZWwuZGF0YS5mb3JFYWNoKChkYXRhKSA9PiAoZGF0YS5zZWxlY3RlZCA9IHNlbGVjdGVkKSk7XG4gICAgdGhpcy51cGRhdGVTZWxlY3RlZCgpO1xuICB9XG5cbiAgc2VsZWN0aW9uQ2hhbmdlZCgpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkKCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVNlbGVjdGVkKCkge1xuICAgIHRoaXMuc2VsZWN0ZWQgPSB0aGlzLm1vZGVsLmRhdGEuZmlsdGVyKChkYXRhKSA9PiBkYXRhLnNlbGVjdGVkKTtcbiAgICB0aGlzLnNlbGVjdGlvbkNoYW5nZS5lbWl0KHsgdmFsdWU6IHRoaXMuc2VsZWN0ZWQgfSk7XG4gIH1cbn1cbiJdfQ==