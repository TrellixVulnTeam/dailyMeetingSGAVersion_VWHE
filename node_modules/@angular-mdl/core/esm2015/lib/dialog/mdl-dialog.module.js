import { NgModule } from "@angular/core";
import { CommonModule } from "@angular/common";
import { MdlDialogService } from "./mdl-dialog.service";
import { MdlDialogComponent } from "./mdl-dialog.component";
import { MdlSimpleDialogComponent } from "./mdl-simple-dialog.component";
import { MdlDialogHostComponent } from "./mdl-dialog-host.component";
import { MdlAlertComponent } from "./mdl-alert.component";
import { MdlDialogOutletModule } from "../dialog-outlet/mdl-dialog-outlet.module";
import { MdlDialogOutletService } from "../dialog-outlet/mdl-dialog-outlet.service";
import { MdlCommonsModule } from "../common/mdl-common.module";
import { MdlButtonModule } from "../button/mdl-button.module";
export * from "./mdl-dialog.component";
export * from "./mdl-dialog.service";
export * from "./mdl-dialog-configuration";
export * from "./mdl-alert.component";
export * from "./mdl-dialog-host.component";
export * from "./mdl-simple-dialog.component";
export * from "./mdl-dialog-reference";
const PUBLIC_COMPONENTS = [MdlDialogComponent, MdlAlertComponent];
const PRIVATE_COMPONENTS = [MdlDialogHostComponent, MdlSimpleDialogComponent];
export class MdlDialogModule {
    static forRoot() {
        return {
            ngModule: MdlDialogModule,
            providers: [MdlDialogService, MdlDialogOutletService],
        };
    }
}
MdlDialogModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    MdlCommonsModule,
                    MdlButtonModule,
                    MdlDialogOutletModule,
                ],
                exports: [...PUBLIC_COMPONENTS],
                declarations: [...PUBLIC_COMPONENTS, ...PRIVATE_COMPONENTS],
                entryComponents: [...PUBLIC_COMPONENTS, ...PRIVATE_COMPONENTS],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRsLWRpYWxvZy5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9saWIvZGlhbG9nL21kbC1kaWFsb2cubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUV6RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUVsRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNwRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFOUQsY0FBYyx3QkFBd0IsQ0FBQztBQUN2QyxjQUFjLHNCQUFzQixDQUFDO0FBQ3JDLGNBQWMsNEJBQTRCLENBQUM7QUFDM0MsY0FBYyx1QkFBdUIsQ0FBQztBQUN0QyxjQUFjLDZCQUE2QixDQUFDO0FBQzVDLGNBQWMsK0JBQStCLENBQUM7QUFDOUMsY0FBYyx3QkFBd0IsQ0FBQztBQUV2QyxNQUFNLGlCQUFpQixHQUFHLENBQUMsa0JBQWtCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUVsRSxNQUFNLGtCQUFrQixHQUFHLENBQUMsc0JBQXNCLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztBQWE5RSxNQUFNLE9BQU8sZUFBZTtJQUNuQixNQUFNLENBQUMsT0FBTztRQUNuQixPQUFPO1lBQ0wsUUFBUSxFQUFFLGVBQWU7WUFDekIsU0FBUyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsc0JBQXNCLENBQUM7U0FDdEQsQ0FBQztJQUNKLENBQUM7OztZQWpCRixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFO29CQUNQLFlBQVk7b0JBQ1osZ0JBQWdCO29CQUNoQixlQUFlO29CQUNmLHFCQUFxQjtpQkFDdEI7Z0JBQ0QsT0FBTyxFQUFFLENBQUMsR0FBRyxpQkFBaUIsQ0FBQztnQkFDL0IsWUFBWSxFQUFFLENBQUMsR0FBRyxpQkFBaUIsRUFBRSxHQUFHLGtCQUFrQixDQUFDO2dCQUMzRCxlQUFlLEVBQUUsQ0FBQyxHQUFHLGlCQUFpQixFQUFFLEdBQUcsa0JBQWtCLENBQUM7YUFDL0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBNZGxEaWFsb2dTZXJ2aWNlIH0gZnJvbSBcIi4vbWRsLWRpYWxvZy5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBNZGxEaWFsb2dDb21wb25lbnQgfSBmcm9tIFwiLi9tZGwtZGlhbG9nLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgTWRsU2ltcGxlRGlhbG9nQ29tcG9uZW50IH0gZnJvbSBcIi4vbWRsLXNpbXBsZS1kaWFsb2cuY29tcG9uZW50XCI7XG5cbmltcG9ydCB7IE1kbERpYWxvZ0hvc3RDb21wb25lbnQgfSBmcm9tIFwiLi9tZGwtZGlhbG9nLWhvc3QuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBNZGxBbGVydENvbXBvbmVudCB9IGZyb20gXCIuL21kbC1hbGVydC5jb21wb25lbnRcIjtcbmltcG9ydCB7IE1kbERpYWxvZ091dGxldE1vZHVsZSB9IGZyb20gXCIuLi9kaWFsb2ctb3V0bGV0L21kbC1kaWFsb2ctb3V0bGV0Lm1vZHVsZVwiO1xuXG5pbXBvcnQgeyBNZGxEaWFsb2dPdXRsZXRTZXJ2aWNlIH0gZnJvbSBcIi4uL2RpYWxvZy1vdXRsZXQvbWRsLWRpYWxvZy1vdXRsZXQuc2VydmljZVwiO1xuaW1wb3J0IHsgTWRsQ29tbW9uc01vZHVsZSB9IGZyb20gXCIuLi9jb21tb24vbWRsLWNvbW1vbi5tb2R1bGVcIjtcbmltcG9ydCB7IE1kbEJ1dHRvbk1vZHVsZSB9IGZyb20gXCIuLi9idXR0b24vbWRsLWJ1dHRvbi5tb2R1bGVcIjtcblxuZXhwb3J0ICogZnJvbSBcIi4vbWRsLWRpYWxvZy5jb21wb25lbnRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21kbC1kaWFsb2cuc2VydmljZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbWRsLWRpYWxvZy1jb25maWd1cmF0aW9uXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tZGwtYWxlcnQuY29tcG9uZW50XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tZGwtZGlhbG9nLWhvc3QuY29tcG9uZW50XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tZGwtc2ltcGxlLWRpYWxvZy5jb21wb25lbnRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21kbC1kaWFsb2ctcmVmZXJlbmNlXCI7XG5cbmNvbnN0IFBVQkxJQ19DT01QT05FTlRTID0gW01kbERpYWxvZ0NvbXBvbmVudCwgTWRsQWxlcnRDb21wb25lbnRdO1xuXG5jb25zdCBQUklWQVRFX0NPTVBPTkVOVFMgPSBbTWRsRGlhbG9nSG9zdENvbXBvbmVudCwgTWRsU2ltcGxlRGlhbG9nQ29tcG9uZW50XTtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBNZGxDb21tb25zTW9kdWxlLFxuICAgIE1kbEJ1dHRvbk1vZHVsZSxcbiAgICBNZGxEaWFsb2dPdXRsZXRNb2R1bGUsXG4gIF0sXG4gIGV4cG9ydHM6IFsuLi5QVUJMSUNfQ09NUE9ORU5UU10sXG4gIGRlY2xhcmF0aW9uczogWy4uLlBVQkxJQ19DT01QT05FTlRTLCAuLi5QUklWQVRFX0NPTVBPTkVOVFNdLFxuICBlbnRyeUNvbXBvbmVudHM6IFsuLi5QVUJMSUNfQ09NUE9ORU5UUywgLi4uUFJJVkFURV9DT01QT05FTlRTXSxcbn0pXG5leHBvcnQgY2xhc3MgTWRsRGlhbG9nTW9kdWxlIHtcbiAgcHVibGljIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnM8TWRsRGlhbG9nTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBNZGxEaWFsb2dNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtNZGxEaWFsb2dTZXJ2aWNlLCBNZGxEaWFsb2dPdXRsZXRTZXJ2aWNlXSxcbiAgICB9O1xuICB9XG59XG4iXX0=