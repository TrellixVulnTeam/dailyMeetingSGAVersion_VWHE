import { Component, ElementRef, forwardRef, HostBinding, Inject, NgZone, Renderer2, ViewChild, ViewContainerRef, ViewEncapsulation, } from "@angular/core";
import { MDL_CONFIGUARTION, MIN_DIALOG_Z_INDEX } from "./config";
import { MdlButtonComponent } from "../button/mdl-button.component";
import { InternalMdlDialogReference } from "./internal-dialog-reference";
import { Animations } from "../common/animations";
const enterTransitionDuration = 300;
const leaveTransitionDuration = 250;
const enterTransitionEasingCurve = "cubic-bezier(0.0, 0.0, 0.2, 1)";
const leaveTransitionEasingCurve = "cubic-bezier(0.0, 0.0, 0.2, 1)";
const createOpenCloseRect = (rect) => ({
    height: rect.top - rect.bottom,
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
});
const ɵ0 = createOpenCloseRect;
const getCenterInScreen = (rect) => ({
    cx: Math.round(rect.left + rect.width / 2),
    cy: Math.round(rect.top + rect.height / 2),
});
const ɵ1 = getCenterInScreen;
const getClientRect = (input) => {
    if (input instanceof MdlButtonComponent) {
        const elRef = input.elementRef;
        const rect = elRef.nativeElement.getBoundingClientRect();
        return createOpenCloseRect(rect);
    }
    else if (input instanceof MouseEvent) {
        const evt = input;
        // just to make it possible to test this code with a fake event - target is
        // readonly and con not be mutated.
        // eslint-disable-next-line
        const htmlElement = (evt.target || evt.testtarget);
        const rect = htmlElement.getBoundingClientRect();
        return createOpenCloseRect(rect);
    }
    return input;
};
const ɵ2 = getClientRect;
// @experimental
export class MdlDialogHostComponent {
    constructor(ngZone, renderer, animations, elementRef, config, internalDialogRef) {
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.animations = animations;
        this.elementRef = elementRef;
        this.config = config;
        this.internalDialogRef = internalDialogRef;
        this.isDialog = true;
        this.visible = false;
        this.zIndex = MIN_DIALOG_Z_INDEX + 1;
        this.showAnimationStartStyle = {
            top: "38%",
            opacity: "0",
        };
        this.showStyle = {
            top: "50%",
            opacity: "1",
        };
        this.hideAnimationEndStyle = {
            top: "63%",
            opacity: "0",
        };
    }
    show() {
        this.visible = true;
        // give the dialogs time to draw so that a focus can be set
        setTimeout(() => {
            this.internalDialogRef.visible();
        });
        if (this.isAnimateEnabled()) {
            if (this.config.openFrom || this.config.closeTo) {
                // transform is modified during anmiation and must be part of each animation keyframe.
                this.showStyle.transform = "translate(0, -50%) scale(1.0)";
                const targetClientRect = this.elementRef.nativeElement.getBoundingClientRect();
                const openFromRect = getClientRect(this.config.openFrom);
                const closeToRect = this.config.closeTo
                    ? getClientRect(this.config.closeTo)
                    : openFromRect;
                const centerTarget = getCenterInScreen(targetClientRect);
                const centerFrom = getCenterInScreen(openFromRect);
                const centerTo = getCenterInScreen(closeToRect);
                const translationFrom = {
                    x: Math.round(centerFrom.cx - centerTarget.cx),
                    y: Math.round(centerFrom.cy - centerTarget.cy),
                    scaleX: Math.round(100 * Math.min(0.25, openFromRect.width / targetClientRect.width)) / 100,
                    scaleY: Math.round(100 *
                        Math.min(0.25, openFromRect.height / targetClientRect.height)) / 100,
                };
                this.showAnimationStartStyle = {
                    top: `${targetClientRect.top}px`,
                    opacity: "0",
                    transform: `translate(${translationFrom.x}px, ${translationFrom.y}px) scale(${translationFrom.scaleX}, ${translationFrom.scaleY})`,
                };
                const translationTo = {
                    x: Math.round(centerTo.cx - centerTarget.cx),
                    y: Math.round(centerTo.cy - centerTarget.cy),
                    scaleX: Math.round(100 * Math.min(0.25, closeToRect.width / targetClientRect.width)) / 100,
                    scaleY: Math.round(100 * Math.min(0.25, closeToRect.height / targetClientRect.height)) / 100,
                };
                this.hideAnimationEndStyle = {
                    top: `${targetClientRect.top}px`,
                    opacity: "0",
                    transform: `translate(${translationTo.x}px, ${translationTo.y}px) scale(${translationTo.scaleX}, ${translationTo.scaleY})`,
                };
            }
            const animation = this.animations.animate(this.elementRef.nativeElement, [this.showAnimationStartStyle, this.showStyle], this.config.enterTransitionDuration || enterTransitionDuration, this.config.enterTransitionEasingCurve || enterTransitionEasingCurve);
            animation.play();
        }
    }
    hide(selfComponentRef) {
        if (this.isAnimateEnabled()) {
            const animation = this.animations.animate(this.elementRef.nativeElement, [this.showStyle, this.hideAnimationEndStyle], this.config.leaveTransitionDuration || leaveTransitionDuration, this.config.leaveTransitionEasingCurve || leaveTransitionEasingCurve);
            animation.onDone(() => {
                selfComponentRef.destroy();
            });
            animation.play();
        }
        else {
            selfComponentRef.destroy();
        }
    }
    ngOnInit() {
        this.applyStyle(this.config.styles);
        this.applyClasses(this.config.classes ? this.config.classes : "");
    }
    applyStyle(styles) {
        if (styles) {
            for (const style of Object.keys(styles)) {
                this.renderer.setStyle(this.elementRef.nativeElement, style, styles[style]);
            }
        }
    }
    applyClasses(classes) {
        classes
            .split(" ")
            .filter((cssClass) => !!cssClass)
            .forEach((cssClass) => {
            this.renderer.addClass(this.elementRef.nativeElement, cssClass);
        });
    }
    isAnimateEnabled() {
        // not present?  assume it is true.
        if (typeof this.config.animate === "undefined") {
            return true;
        }
        return this.config.animate;
    }
}
MdlDialogHostComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-dialog-host-component",
                template: ` <div #dialogTarget></div>`,
                encapsulation: ViewEncapsulation.None,
                styles: [`
      mdl-dialog-host-component {
        width: fit-content;
        height: fit-content;
        padding: 1em;
        background: white;
        color: black;
        opacity: 1;
        visibility: hidden;
        display: block;
        position: fixed;
        margin: auto;
        left: 0;
        right: 0;
        transition: all;
        top: 50%;
        transform: translate(0, -50%);
      }

      mdl-dialog-host-component.open {
        visibility: visible;
      }
    `]
            },] }
];
MdlDialogHostComponent.ctorParameters = () => [
    { type: NgZone },
    { type: Renderer2 },
    { type: Animations },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => MDL_CONFIGUARTION),] }] },
    { type: InternalMdlDialogReference }
];
MdlDialogHostComponent.propDecorators = {
    dialogTarget: [{ type: ViewChild, args: ["dialogTarget", { read: ViewContainerRef, static: true },] }],
    isDialog: [{ type: HostBinding, args: ["class.mdl-dialog",] }],
    visible: [{ type: HostBinding, args: ["class.open",] }],
    zIndex: [{ type: HostBinding, args: ["style.zIndex",] }]
};
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,