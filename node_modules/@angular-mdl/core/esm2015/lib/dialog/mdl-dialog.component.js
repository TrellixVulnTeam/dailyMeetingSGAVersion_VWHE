import { Component, EventEmitter, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, } from "@angular/core";
import { Subject } from "rxjs";
import { MdlDialogService } from "./mdl-dialog.service";
export class MdlDialogComponent {
    constructor(dialogService) {
        this.dialogService = dialogService;
        // eslint-disable-next-line
        this.showEmitter = new EventEmitter();
        // eslint-disable-next-line
        this.hideEmitter = new EventEmitter();
        this.isShown = false;
        this.dialogRef = null;
    }
    show() {
        if (this.isShown) {
            throw new Error("Only one instance of an embedded mdl-dialog can exist!");
        }
        this.isShown = true;
        const mergedConfig = this.config || {};
        // default is true
        if (typeof mergedConfig.isModal === "undefined") {
            mergedConfig.isModal = true;
        }
        const result = new Subject();
        const p = this.dialogService.showDialogTemplate(this.template, mergedConfig);
        p.subscribe((dialogRef) => {
            this.dialogRef = dialogRef;
            this.dialogRef.onVisible().subscribe(() => {
                this.showEmitter.emit(dialogRef);
                result.next(dialogRef);
                result.complete();
            });
            this.dialogRef.onHide().subscribe(() => {
                this.hideEmitter.emit(null);
                this.dialogRef = null;
                this.isShown = false;
            });
        });
        return result.asObservable();
    }
    close() {
        if (this.dialogRef) {
            this.dialogRef.hide();
        }
    }
}
MdlDialogComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-dialog",
                template: `
    <div *dialogTemplate>
      <ng-content></ng-content>
    </div>
  `,
                encapsulation: ViewEncapsulation.None
            },] }
];
MdlDialogComponent.ctorParameters = () => [
    { type: MdlDialogService }
];
MdlDialogComponent.propDecorators = {
    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],
    config: [{ type: Input, args: ['mdl-dialog-config',] }],
    showEmitter: [{ type: Output, args: ['show',] }],
    hideEmitter: [{ type: Output, args: ['hide',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRsLWRpYWxvZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9saWIvZGlhbG9nL21kbC1kaWFsb2cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBQ04sV0FBVyxFQUNYLFNBQVMsRUFDVCxpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQWF4RCxNQUFNLE9BQU8sa0JBQWtCO0lBbUI3QixZQUFvQixhQUErQjtRQUEvQixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFYbkQsMkJBQTJCO1FBRTNCLGdCQUFXLEdBQXFDLElBQUksWUFBWSxFQUFzQixDQUFDO1FBRXZGLDJCQUEyQjtRQUUzQixnQkFBVyxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDO1FBRW5ELFlBQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsY0FBUyxHQUF1QixJQUFJLENBQUM7SUFFUyxDQUFDO0lBRXZELElBQUk7UUFDRixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3REFBd0QsQ0FBQyxDQUFDO1NBQzNFO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFFcEIsTUFBTSxZQUFZLEdBQTRCLElBQUksQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO1FBRWhFLGtCQUFrQjtRQUNsQixJQUFJLE9BQU8sWUFBWSxDQUFDLE9BQU8sS0FBSyxXQUFXLEVBQUU7WUFDL0MsWUFBWSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7U0FDN0I7UUFFRCxNQUFNLE1BQU0sR0FBZ0MsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUUxRCxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUM3QyxJQUFJLENBQUMsUUFBUSxFQUNiLFlBQVksQ0FDYixDQUFDO1FBQ0YsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQTZCLEVBQUUsRUFBRTtZQUM1QyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztZQUUzQixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3hDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUVqQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUN2QixNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDcEIsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztnQkFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7WUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDdkI7SUFDSCxDQUFDOzs7WUF4RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2dCQUN0QixRQUFRLEVBQUU7Ozs7R0FJVDtnQkFDRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTthQUN0Qzs7O1lBWlEsZ0JBQWdCOzs7dUJBY3RCLFNBQVMsU0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO3FCQUl2QyxLQUFLLFNBQUMsbUJBQW1COzBCQUl6QixNQUFNLFNBQUMsTUFBTTswQkFJYixNQUFNLFNBQUMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tIFwicnhqc1wiO1xuXG5pbXBvcnQgeyBNZGxEaWFsb2dTZXJ2aWNlIH0gZnJvbSBcIi4vbWRsLWRpYWxvZy5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBJTWRsRGlhbG9nQ29uZmlndXJhdGlvbiB9IGZyb20gXCIuL21kbC1kaWFsb2ctY29uZmlndXJhdGlvblwiO1xuaW1wb3J0IHsgTWRsRGlhbG9nUmVmZXJlbmNlIH0gZnJvbSBcIi4vbWRsLWRpYWxvZy1yZWZlcmVuY2VcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcIm1kbC1kaWFsb2dcIixcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2ICpkaWFsb2dUZW1wbGF0ZT5cbiAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgTWRsRGlhbG9nQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZChUZW1wbGF0ZVJlZiwgeyBzdGF0aWM6IHRydWUgfSlcbiAgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPHVua25vd24+O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBASW5wdXQoJ21kbC1kaWFsb2ctY29uZmlnJylcbiAgY29uZmlnOiBJTWRsRGlhbG9nQ29uZmlndXJhdGlvbjtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgQE91dHB1dCgnc2hvdycpXG4gIHNob3dFbWl0dGVyOiBFdmVudEVtaXR0ZXI8TWRsRGlhbG9nUmVmZXJlbmNlPiA9IG5ldyBFdmVudEVtaXR0ZXI8TWRsRGlhbG9nUmVmZXJlbmNlPigpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBAT3V0cHV0KCdoaWRlJylcbiAgaGlkZUVtaXR0ZXI6IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICBwcml2YXRlIGlzU2hvd24gPSBmYWxzZTtcbiAgcHJpdmF0ZSBkaWFsb2dSZWY6IE1kbERpYWxvZ1JlZmVyZW5jZSA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkaWFsb2dTZXJ2aWNlOiBNZGxEaWFsb2dTZXJ2aWNlKSB7fVxuXG4gIHNob3coKTogT2JzZXJ2YWJsZTxNZGxEaWFsb2dSZWZlcmVuY2U+IHtcbiAgICBpZiAodGhpcy5pc1Nob3duKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IG9uZSBpbnN0YW5jZSBvZiBhbiBlbWJlZGRlZCBtZGwtZGlhbG9nIGNhbiBleGlzdCFcIik7XG4gICAgfVxuICAgIHRoaXMuaXNTaG93biA9IHRydWU7XG5cbiAgICBjb25zdCBtZXJnZWRDb25maWc6IElNZGxEaWFsb2dDb25maWd1cmF0aW9uID0gdGhpcy5jb25maWcgfHwge307XG5cbiAgICAvLyBkZWZhdWx0IGlzIHRydWVcbiAgICBpZiAodHlwZW9mIG1lcmdlZENvbmZpZy5pc01vZGFsID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBtZXJnZWRDb25maWcuaXNNb2RhbCA9IHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0OiBTdWJqZWN0PE1kbERpYWxvZ1JlZmVyZW5jZT4gPSBuZXcgU3ViamVjdCgpO1xuXG4gICAgY29uc3QgcCA9IHRoaXMuZGlhbG9nU2VydmljZS5zaG93RGlhbG9nVGVtcGxhdGUoXG4gICAgICB0aGlzLnRlbXBsYXRlLFxuICAgICAgbWVyZ2VkQ29uZmlnXG4gICAgKTtcbiAgICBwLnN1YnNjcmliZSgoZGlhbG9nUmVmOiBNZGxEaWFsb2dSZWZlcmVuY2UpID0+IHtcbiAgICAgIHRoaXMuZGlhbG9nUmVmID0gZGlhbG9nUmVmO1xuXG4gICAgICB0aGlzLmRpYWxvZ1JlZi5vblZpc2libGUoKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLnNob3dFbWl0dGVyLmVtaXQoZGlhbG9nUmVmKTtcblxuICAgICAgICByZXN1bHQubmV4dChkaWFsb2dSZWYpO1xuICAgICAgICByZXN1bHQuY29tcGxldGUoKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmRpYWxvZ1JlZi5vbkhpZGUoKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLmhpZGVFbWl0dGVyLmVtaXQobnVsbCk7XG4gICAgICAgIHRoaXMuZGlhbG9nUmVmID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc1Nob3duID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0LmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgY2xvc2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZGlhbG9nUmVmKSB7XG4gICAgICB0aGlzLmRpYWxvZ1JlZi5oaWRlKCk7XG4gICAgfVxuICB9XG59XG4iXX0=