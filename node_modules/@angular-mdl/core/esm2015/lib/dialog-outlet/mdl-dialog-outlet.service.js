import { ApplicationRef, ComponentFactoryResolver, EventEmitter, Injectable, } from "@angular/core";
import { MdlBackdropOverlayComponent } from "./mdl-backdrop-overlay.component";
import { filter, take } from "rxjs/operators";
import { MdlDialogOutletComponent } from "./mdl-dialog-outlet.component";
import * as i0 from "@angular/core";
export class MdlDialogOutletService {
    constructor(appRef, componentFactoryResolver) {
        this.appRef = appRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.backdropClickEmitter = new EventEmitter();
        this.viewContainerRefInternal = null;
        let dialogOutletCompRef = null;
        appRef.isStable
            .pipe(take(1), filter(() => this.viewContainerRefInternal == null))
            .subscribe(() => {
            try {
                dialogOutletCompRef = this.appRef.bootstrap(MdlDialogOutletComponent);
            }
            catch (e) {
                // the user did not use the dialog.outlet element outside of his root app.
                // console.log(e);
            }
            if (dialogOutletCompRef) {
                this.setViewContainerRef(dialogOutletCompRef.instance.viewContainerRef);
            }
        });
    }
    get viewContainerRef() {
        return this.viewContainerRefInternal;
    }
    setDefaultViewContainerRef(vCRef) {
        this.setViewContainerRef(vCRef);
    }
    hideBackdrop() {
        this.backdropComponent.hide();
    }
    showBackdropWithZIndex(zIndex) {
        this.backdropComponent.showWithZIndex(zIndex);
    }
    setViewContainerRef(value) {
        this.viewContainerRefInternal = value;
        if (this.viewContainerRefInternal) {
            const cFactory = this.componentFactoryResolver.resolveComponentFactory(MdlBackdropOverlayComponent);
            this.backdropComponent = this.viewContainerRefInternal.createComponent(cFactory).instance;
            this.backdropComponent.clickEmitter.subscribe(() => {
                this.backdropClickEmitter.emit();
            });
        }
    }
}
MdlDialogOutletService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MdlDialogOutletService_Factory() { return new MdlDialogOutletService(i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i0.ComponentFactoryResolver)); }, token: MdlDialogOutletService, providedIn: "root" });
MdlDialogOutletService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root",
            },] }
];
MdlDialogOutletService.ctorParameters = () => [
    { type: ApplicationRef },
    { type: ComponentFactoryResolver }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRsLWRpYWxvZy1vdXRsZXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL2xpYi9kaWFsb2ctb3V0bGV0L21kbC1kaWFsb2ctb3V0bGV0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGNBQWMsRUFDZCx3QkFBd0IsRUFFeEIsWUFBWSxFQUNaLFVBQVUsR0FFWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLCtCQUErQixDQUFDOztBQUt6RSxNQUFNLE9BQU8sc0JBQXNCO0lBTWpDLFlBQ1UsTUFBc0IsRUFDdEIsd0JBQWtEO1FBRGxELFdBQU0sR0FBTixNQUFNLENBQWdCO1FBQ3RCLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFQNUQseUJBQW9CLEdBQXVCLElBQUksWUFBWSxFQUFFLENBQUM7UUFFdEQsNkJBQXdCLEdBQTRCLElBQUksQ0FBQztRQU8vRCxJQUFJLG1CQUFtQixHQUEyQyxJQUFJLENBQUM7UUFDdkUsTUFBTSxDQUFDLFFBQVE7YUFDWixJQUFJLENBQ0gsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLElBQUksSUFBSSxDQUFDLENBQ3BEO2FBQ0EsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNkLElBQUk7Z0JBQ0YsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsQ0FBQzthQUN2RTtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLDBFQUEwRTtnQkFDMUUsa0JBQWtCO2FBQ25CO1lBQ0QsSUFBSSxtQkFBbUIsRUFBRTtnQkFDdkIsSUFBSSxDQUFDLG1CQUFtQixDQUN0QixtQkFBbUIsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQzlDLENBQUM7YUFDSDtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELElBQUksZ0JBQWdCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLHdCQUF3QixDQUFDO0lBQ3ZDLENBQUM7SUFFRCwwQkFBMEIsQ0FBQyxLQUF1QjtRQUNoRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELFlBQVk7UUFDVixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVELHNCQUFzQixDQUFDLE1BQWM7UUFDbkMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRU8sbUJBQW1CLENBQUMsS0FBdUI7UUFDakQsSUFBSSxDQUFDLHdCQUF3QixHQUFHLEtBQUssQ0FBQztRQUV0QyxJQUFJLElBQUksQ0FBQyx3QkFBd0IsRUFBRTtZQUNqQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsdUJBQXVCLENBQ3BFLDJCQUEyQixDQUM1QixDQUFDO1lBQ0YsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxlQUFlLENBQ3BFLFFBQVEsQ0FDVCxDQUFDLFFBQVEsQ0FBQztZQUNYLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtnQkFDakQsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxDQUFDO1lBQ25DLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7O1lBaEVGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBYkMsY0FBYztZQUNkLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFwcGxpY2F0aW9uUmVmLFxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIENvbXBvbmVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbmplY3RhYmxlLFxuICBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgTWRsQmFja2Ryb3BPdmVybGF5Q29tcG9uZW50IH0gZnJvbSBcIi4vbWRsLWJhY2tkcm9wLW92ZXJsYXkuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBmaWx0ZXIsIHRha2UgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcbmltcG9ydCB7IE1kbERpYWxvZ091dGxldENvbXBvbmVudCB9IGZyb20gXCIuL21kbC1kaWFsb2ctb3V0bGV0LmNvbXBvbmVudFwiO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46IFwicm9vdFwiLFxufSlcbmV4cG9ydCBjbGFzcyBNZGxEaWFsb2dPdXRsZXRTZXJ2aWNlIHtcbiAgYmFja2Ryb3BDbGlja0VtaXR0ZXI6IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBwcml2YXRlIHZpZXdDb250YWluZXJSZWZJbnRlcm5hbDogVmlld0NvbnRhaW5lclJlZiB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGJhY2tkcm9wQ29tcG9uZW50OiBNZGxCYWNrZHJvcE92ZXJsYXlDb21wb25lbnQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhcHBSZWY6IEFwcGxpY2F0aW9uUmVmLFxuICAgIHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcbiAgKSB7XG4gICAgbGV0IGRpYWxvZ091dGxldENvbXBSZWY6IENvbXBvbmVudFJlZjxNZGxEaWFsb2dPdXRsZXRDb21wb25lbnQ+ID0gbnVsbDtcbiAgICBhcHBSZWYuaXNTdGFibGVcbiAgICAgIC5waXBlKFxuICAgICAgICB0YWtlKDEpLFxuICAgICAgICBmaWx0ZXIoKCkgPT4gdGhpcy52aWV3Q29udGFpbmVyUmVmSW50ZXJuYWwgPT0gbnVsbClcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGRpYWxvZ091dGxldENvbXBSZWYgPSB0aGlzLmFwcFJlZi5ib290c3RyYXAoTWRsRGlhbG9nT3V0bGV0Q29tcG9uZW50KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIHRoZSB1c2VyIGRpZCBub3QgdXNlIHRoZSBkaWFsb2cub3V0bGV0IGVsZW1lbnQgb3V0c2lkZSBvZiBoaXMgcm9vdCBhcHAuXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpYWxvZ091dGxldENvbXBSZWYpIHtcbiAgICAgICAgICB0aGlzLnNldFZpZXdDb250YWluZXJSZWYoXG4gICAgICAgICAgICBkaWFsb2dPdXRsZXRDb21wUmVmLmluc3RhbmNlLnZpZXdDb250YWluZXJSZWZcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIGdldCB2aWV3Q29udGFpbmVyUmVmKCk6IFZpZXdDb250YWluZXJSZWYge1xuICAgIHJldHVybiB0aGlzLnZpZXdDb250YWluZXJSZWZJbnRlcm5hbDtcbiAgfVxuXG4gIHNldERlZmF1bHRWaWV3Q29udGFpbmVyUmVmKHZDUmVmOiBWaWV3Q29udGFpbmVyUmVmKTogdm9pZCB7XG4gICAgdGhpcy5zZXRWaWV3Q29udGFpbmVyUmVmKHZDUmVmKTtcbiAgfVxuXG4gIGhpZGVCYWNrZHJvcCgpOiB2b2lkIHtcbiAgICB0aGlzLmJhY2tkcm9wQ29tcG9uZW50LmhpZGUoKTtcbiAgfVxuXG4gIHNob3dCYWNrZHJvcFdpdGhaSW5kZXgoekluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmJhY2tkcm9wQ29tcG9uZW50LnNob3dXaXRoWkluZGV4KHpJbmRleCk7XG4gIH1cblxuICBwcml2YXRlIHNldFZpZXdDb250YWluZXJSZWYodmFsdWU6IFZpZXdDb250YWluZXJSZWYpIHtcbiAgICB0aGlzLnZpZXdDb250YWluZXJSZWZJbnRlcm5hbCA9IHZhbHVlO1xuXG4gICAgaWYgKHRoaXMudmlld0NvbnRhaW5lclJlZkludGVybmFsKSB7XG4gICAgICBjb25zdCBjRmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFxuICAgICAgICBNZGxCYWNrZHJvcE92ZXJsYXlDb21wb25lbnRcbiAgICAgICk7XG4gICAgICB0aGlzLmJhY2tkcm9wQ29tcG9uZW50ID0gdGhpcy52aWV3Q29udGFpbmVyUmVmSW50ZXJuYWwuY3JlYXRlQ29tcG9uZW50KFxuICAgICAgICBjRmFjdG9yeVxuICAgICAgKS5pbnN0YW5jZTtcbiAgICAgIHRoaXMuYmFja2Ryb3BDb21wb25lbnQuY2xpY2tFbWl0dGVyLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuYmFja2Ryb3BDbGlja0VtaXR0ZXIuZW1pdCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=