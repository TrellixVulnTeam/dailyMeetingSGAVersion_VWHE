import { Component, EventEmitter, HostBinding, HostListener, NgZone, ViewEncapsulation, } from "@angular/core";
export class MdlBackdropOverlayComponent {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.zIndex = 0;
        this.isBackdrop = true;
        this.clickEmitter = new EventEmitter();
        this.visible = false;
    }
    get display() {
        return this.visible ? null : "none";
    }
    onBackdropClick(e) {
        // this event runs not in angular zone of the main app. make sure it runs in the main angular zone
        // and change detection works
        this.ngZone.run(() => {
            this.clickEmitter.emit();
        });
        e.stopPropagation();
    }
    hide() {
        this.visible = false;
    }
    showWithZIndex(zIndex) {
        this.zIndex = zIndex;
        this.visible = true;
    }
}
MdlBackdropOverlayComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-backdrop-overlay",
                template: ``,
                encapsulation: ViewEncapsulation.None,
                styles: [`
      .dialog-backdrop {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background: rgba(0, 0, 0, 0.1);
      }
    `]
            },] }
];
MdlBackdropOverlayComponent.ctorParameters = () => [
    { type: NgZone }
];
MdlBackdropOverlayComponent.propDecorators = {
    zIndex: [{ type: HostBinding, args: ["style.zIndex",] }],
    isBackdrop: [{ type: HostBinding, args: ["class.dialog-backdrop",] }],
    display: [{ type: HostBinding, args: ["style.display",] }],
    onBackdropClick: [{ type: HostListener, args: ["click", ["$event"],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRsLWJhY2tkcm9wLW92ZXJsYXkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvbGliL2RpYWxvZy1vdXRsZXQvbWRsLWJhY2tkcm9wLW92ZXJsYXkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLFdBQVcsRUFDWCxZQUFZLEVBQ1osTUFBTSxFQUNOLGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQW1CdkIsTUFBTSxPQUFPLDJCQUEyQjtJQVd0QyxZQUFvQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQVRsQyxXQUFNLEdBQUcsQ0FBQyxDQUFDO1FBR1gsZUFBVSxHQUFHLElBQUksQ0FBQztRQUVYLGlCQUFZLEdBQXVCLElBQUksWUFBWSxFQUFFLENBQUM7UUFFckQsWUFBTyxHQUFHLEtBQUssQ0FBQztJQUVhLENBQUM7SUFFdEMsSUFDSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUN0QyxDQUFDO0lBR0QsZUFBZSxDQUFDLENBQVE7UUFDdEIsa0dBQWtHO1FBQ2xHLDZCQUE2QjtRQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztRQUNILENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxjQUFjLENBQUMsTUFBYztRQUMzQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztJQUN0QixDQUFDOzs7WUFwREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLFFBQVEsRUFBRSxFQUFFO2dCQWFaLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO3lCQVhuQzs7Ozs7Ozs7O0tBU0M7YUFHSjs7O1lBcEJDLE1BQU07OztxQkFzQkwsV0FBVyxTQUFDLGNBQWM7eUJBRzFCLFdBQVcsU0FBQyx1QkFBdUI7c0JBU25DLFdBQVcsU0FBQyxlQUFlOzhCQUszQixZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RCaW5kaW5nLFxuICBIb3N0TGlzdGVuZXIsXG4gIE5nWm9uZSxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJtZGwtYmFja2Ryb3Atb3ZlcmxheVwiLFxuICB0ZW1wbGF0ZTogYGAsXG4gIHN0eWxlczogW1xuICAgIGBcbiAgICAgIC5kaWFsb2ctYmFja2Ryb3Age1xuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjEpO1xuICAgICAgfVxuICAgIGAsXG4gIF0sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG59KVxuZXhwb3J0IGNsYXNzIE1kbEJhY2tkcm9wT3ZlcmxheUNvbXBvbmVudCB7XG4gIEBIb3N0QmluZGluZyhcInN0eWxlLnpJbmRleFwiKVxuICB6SW5kZXggPSAwO1xuXG4gIEBIb3N0QmluZGluZyhcImNsYXNzLmRpYWxvZy1iYWNrZHJvcFwiKVxuICBpc0JhY2tkcm9wID0gdHJ1ZTtcblxuICBwdWJsaWMgY2xpY2tFbWl0dGVyOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcHJpdmF0ZSB2aXNpYmxlID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge31cblxuICBASG9zdEJpbmRpbmcoXCJzdHlsZS5kaXNwbGF5XCIpXG4gIGdldCBkaXNwbGF5KCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLnZpc2libGUgPyBudWxsIDogXCJub25lXCI7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKFwiY2xpY2tcIiwgW1wiJGV2ZW50XCJdKVxuICBvbkJhY2tkcm9wQ2xpY2soZTogRXZlbnQpOiB2b2lkIHtcbiAgICAvLyB0aGlzIGV2ZW50IHJ1bnMgbm90IGluIGFuZ3VsYXIgem9uZSBvZiB0aGUgbWFpbiBhcHAuIG1ha2Ugc3VyZSBpdCBydW5zIGluIHRoZSBtYWluIGFuZ3VsYXIgem9uZVxuICAgIC8vIGFuZCBjaGFuZ2UgZGV0ZWN0aW9uIHdvcmtzXG4gICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgIHRoaXMuY2xpY2tFbWl0dGVyLmVtaXQoKTtcbiAgICB9KTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgaGlkZSgpOiB2b2lkIHtcbiAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcbiAgfVxuXG4gIHNob3dXaXRoWkluZGV4KHpJbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy56SW5kZXggPSB6SW5kZXg7XG4gICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgfVxufVxuIl19