import { Component, ElementRef, forwardRef, HostBinding, HostListener, Inject, Input, ViewEncapsulation, } from "@angular/core";
import { MdlMenuComponent } from "./mdl-menu.component";
import { toBoolean } from "../common/boolean-property";
import { callNative } from "../common/native-support";
export class MdlMenuItemComponent {
    // forwardRef is needed because of he circular dependency menu queries menuitems; menuitem needs the parent
    constructor(elementRef, mdlMenu) {
        this.elementRef = elementRef;
        this.mdlMenu = mdlMenu;
        this.tabindex = -1;
        this.isMenuItem = true;
        this.disabledIntern = false;
        this.element = elementRef.nativeElement;
    }
    get disabled() {
        return this.disabledIntern;
    }
    set disabled(value) {
        this.disabledIntern = toBoolean(value);
    }
    onClick($event) {
        $event.stopPropagation();
        if (this.disabled) {
            this.mdlMenu.hide();
            return;
        }
        this.mdlMenu.hideOnItemClicked();
    }
    // we need to register a touchstart at the window to get informed if the user taps outside the menu.
    // But if we register a touchstart event - safari will no longer convert touch events to click events.
    // So we need to convert touch to click and the user still needs to register a (click) listener to be
    // informed if the menu item has clicked.
    onTouch($event) {
        // ensure that this event is totally consumed
        $event.stopPropagation();
        $event.preventDefault();
        const event = new MouseEvent("click", { bubbles: true });
        callNative(this.element, "dispatchEvent", event);
    }
}
MdlMenuItemComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-menu-item",
                template: "<ng-content></ng-content>",
                encapsulation: ViewEncapsulation.None
            },] }
];
MdlMenuItemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: MdlMenuComponent, decorators: [{ type: Inject, args: [forwardRef(() => MdlMenuComponent),] }] }
];
MdlMenuItemComponent.propDecorators = {
    tabindex: [{ type: HostBinding, args: ["tabindex",] }],
    isMenuItem: [{ type: HostBinding, args: ["class.mdl-menu__item",] }],
    disabled: [{ type: Input }],
    onClick: [{ type: HostListener, args: ["click", ["$event"],] }],
    onTouch: [{ type: HostListener, args: ["touchstart", ["$event"],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRsLW1lbnUtaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9saWIvbWVudS9tZGwtbWVudS1pdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBT3RELE1BQU0sT0FBTyxvQkFBb0I7SUFVL0IsMkdBQTJHO0lBQzNHLFlBQ1UsVUFBc0IsRUFFdEIsT0FBeUI7UUFGekIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUV0QixZQUFPLEdBQVAsT0FBTyxDQUFrQjtRQVpuQyxhQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFZCxlQUFVLEdBQUcsSUFBSSxDQUFDO1FBSVYsbUJBQWMsR0FBRyxLQUFLLENBQUM7UUFRN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDO0lBQzFDLENBQUM7SUFFRCxJQUNJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQUksUUFBUSxDQUFDLEtBQWM7UUFDekIsSUFBSSxDQUFDLGNBQWMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUdELE9BQU8sQ0FBQyxNQUFhO1FBQ25CLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN6QixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELG9HQUFvRztJQUNwRyxzR0FBc0c7SUFDdEcscUdBQXFHO0lBQ3JHLHlDQUF5QztJQUV6QyxPQUFPLENBQUMsTUFBYTtRQUNuQiw2Q0FBNkM7UUFDN0MsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUV4QixNQUFNLEtBQUssR0FBRyxJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN6RCxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7O1lBdkRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZUFBZTtnQkFDekIsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7YUFDdEM7OztZQWhCQyxVQUFVO1lBUUgsZ0JBQWdCLHVCQXNCcEIsTUFBTSxTQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQzs7O3VCQVozQyxXQUFXLFNBQUMsVUFBVTt5QkFFdEIsV0FBVyxTQUFDLHNCQUFzQjt1QkFnQmxDLEtBQUs7c0JBU0wsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQztzQkFjaEMsWUFBWSxTQUFDLFlBQVksRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgZm9yd2FyZFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBNZGxNZW51Q29tcG9uZW50IH0gZnJvbSBcIi4vbWRsLW1lbnUuY29tcG9uZW50XCI7XG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tIFwiLi4vY29tbW9uL2Jvb2xlYW4tcHJvcGVydHlcIjtcbmltcG9ydCB7IGNhbGxOYXRpdmUgfSBmcm9tIFwiLi4vY29tbW9uL25hdGl2ZS1zdXBwb3J0XCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJtZGwtbWVudS1pdGVtXCIsXG4gIHRlbXBsYXRlOiBcIjxuZy1jb250ZW50PjwvbmctY29udGVudD5cIixcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgTWRsTWVudUl0ZW1Db21wb25lbnQge1xuICBASG9zdEJpbmRpbmcoXCJ0YWJpbmRleFwiKVxuICB0YWJpbmRleCA9IC0xO1xuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5tZGwtbWVudV9faXRlbVwiKVxuICBpc01lbnVJdGVtID0gdHJ1ZTtcblxuICBlbGVtZW50OiBIVE1MRWxlbWVudDtcblxuICBwcml2YXRlIGRpc2FibGVkSW50ZXJuID0gZmFsc2U7XG5cbiAgLy8gZm9yd2FyZFJlZiBpcyBuZWVkZWQgYmVjYXVzZSBvZiBoZSBjaXJjdWxhciBkZXBlbmRlbmN5IG1lbnUgcXVlcmllcyBtZW51aXRlbXM7IG1lbnVpdGVtIG5lZWRzIHRoZSBwYXJlbnRcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBNZGxNZW51Q29tcG9uZW50KSlcbiAgICBwcml2YXRlIG1kbE1lbnU6IE1kbE1lbnVDb21wb25lbnRcbiAgKSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgQElucHV0KClcbiAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmRpc2FibGVkSW50ZXJuO1xuICB9XG5cbiAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5kaXNhYmxlZEludGVybiA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKFwiY2xpY2tcIiwgW1wiJGV2ZW50XCJdKVxuICBvbkNsaWNrKCRldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMubWRsTWVudS5oaWRlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubWRsTWVudS5oaWRlT25JdGVtQ2xpY2tlZCgpO1xuICB9XG5cbiAgLy8gd2UgbmVlZCB0byByZWdpc3RlciBhIHRvdWNoc3RhcnQgYXQgdGhlIHdpbmRvdyB0byBnZXQgaW5mb3JtZWQgaWYgdGhlIHVzZXIgdGFwcyBvdXRzaWRlIHRoZSBtZW51LlxuICAvLyBCdXQgaWYgd2UgcmVnaXN0ZXIgYSB0b3VjaHN0YXJ0IGV2ZW50IC0gc2FmYXJpIHdpbGwgbm8gbG9uZ2VyIGNvbnZlcnQgdG91Y2ggZXZlbnRzIHRvIGNsaWNrIGV2ZW50cy5cbiAgLy8gU28gd2UgbmVlZCB0byBjb252ZXJ0IHRvdWNoIHRvIGNsaWNrIGFuZCB0aGUgdXNlciBzdGlsbCBuZWVkcyB0byByZWdpc3RlciBhIChjbGljaykgbGlzdGVuZXIgdG8gYmVcbiAgLy8gaW5mb3JtZWQgaWYgdGhlIG1lbnUgaXRlbSBoYXMgY2xpY2tlZC5cbiAgQEhvc3RMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgW1wiJGV2ZW50XCJdKVxuICBvblRvdWNoKCRldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICAvLyBlbnN1cmUgdGhhdCB0aGlzIGV2ZW50IGlzIHRvdGFsbHkgY29uc3VtZWRcbiAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zdCBldmVudCA9IG5ldyBNb3VzZUV2ZW50KFwiY2xpY2tcIiwgeyBidWJibGVzOiB0cnVlIH0pO1xuICAgIGNhbGxOYXRpdmUodGhpcy5lbGVtZW50LCBcImRpc3BhdGNoRXZlbnRcIiwgZXZlbnQpO1xuICB9XG59XG4iXX0=