import { Component, ElementRef, HostBinding, HostListener, Input, ViewEncapsulation, } from "@angular/core";
import { MdlError } from "../common/mdl-error";
import { toBoolean } from "../common/boolean-property";
import { callNative } from "../common/native-support";
export class MdlUnsupportedButtonTypeError extends MdlError {
    constructor(type) {
        /* istanbul ignore next */
        super(`Button type "${type}" isn't supported (allowed: raised, fab, mini-fab, icon, '').`);
    }
}
export class MdlUnsupportedColoredTypeError extends MdlError {
    constructor(type) {
        /* istanbul ignore next */
        super(`Colored type "${type}" isn't supported (allowed: primary, accent, '').`);
    }
}
const MDL_BUTTON_TYPES = ["raised", "fab", "mini-fab", "icon", ""];
const MDL_COLORED_TYPES = ["primary", "accent", ""];
export class MdlButtonComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isButton = true;
        this.disabledIntern = false;
        this.element = elementRef.nativeElement;
    }
    get isDisable() {
        return this.disabled ? "disabled" : null;
    }
    get raised() {
        return this.mdlButtonType === "raised";
    }
    get fab() {
        return this.mdlButtonType === "fab" || this.mdlButtonType === "mini-fab";
    }
    get miniFab() {
        return this.mdlButtonType === "mini-fab";
    }
    get icon() {
        return this.mdlButtonType === "icon";
    }
    get primary() {
        return this.mdlColoredType === "primary";
    }
    get accent() {
        return this.mdlColoredType === "accent";
    }
    get disabled() {
        return this.disabledIntern;
    }
    set disabled(value) {
        this.disabledIntern = toBoolean(value);
    }
    onMouseUp() {
        this.blurIt();
    }
    onMouseLeave() {
        this.blurIt();
    }
    ngOnChanges() {
        if (this.mdlButtonType &&
            MDL_BUTTON_TYPES.indexOf(this.mdlButtonType) === -1) {
            throw new MdlUnsupportedButtonTypeError(this.mdlButtonType);
        }
        if (this.mdlColoredType &&
            MDL_COLORED_TYPES.indexOf(this.mdlColoredType) === -1) {
            throw new MdlUnsupportedColoredTypeError(this.mdlColoredType);
        }
    }
    blurIt() {
        callNative(this.element, "blur");
    }
}
MdlButtonComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-button, button[mdl-button], a[mdl-button]",
                exportAs: "mdlButton",
                template: "<ng-content></ng-content>",
                encapsulation: ViewEncapsulation.None
            },] }
];
MdlButtonComponent.ctorParameters = () => [
    { type: ElementRef }
];
MdlButtonComponent.propDecorators = {
    isButton: [{ type: HostBinding, args: ["class.mdl-button",] }],
    mdlButtonType: [{ type: Input, args: ["mdl-button-type",] }],
    mdlColoredType: [{ type: Input, args: ["mdl-colored",] }],
    isDisable: [{ type: HostBinding, args: ["attr.disabled",] }],
    raised: [{ type: HostBinding, args: ["class.mdl-button--raised",] }],
    fab: [{ type: HostBinding, args: ["class.mdl-button--fab",] }],
    miniFab: [{ type: HostBinding, args: ["class.mdl-button--mini-fab",] }],
    icon: [{ type: HostBinding, args: ["class.mdl-button--icon",] }],
    primary: [{ type: HostBinding, args: ["class.mdl-button--primary",] }],
    accent: [{ type: HostBinding, args: ["class.mdl-button--accent",] }],
    disabled: [{ type: Input }],
    onMouseUp: [{ type: HostListener, args: ["mouseup",] }],
    onMouseLeave: [{ type: HostListener, args: ["mouseleave",] }]
};
//# sourceMappingURL=data:application/json;base64,