import { Component, Directive, HostBinding, Input, Optional, ViewEncapsulation, } from "@angular/core";
import { MdlError, MdlStructureError } from "../common/mdl-error";
import { toNumber } from "../common/number.property";
export class MdlUnsupportedCountOfListItemLinesError extends MdlError {
    constructor(lines) {
        /* istanbul ignore next */
        super(`"${lines}" is not supported - max 3 lines please.`);
    }
}
export class MdlListComponent {
    constructor() {
        this.isMdlList = true;
    }
}
MdlListComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-list",
                template: "<ng-content></ng-content>",
                encapsulation: ViewEncapsulation.None
            },] }
];
MdlListComponent.propDecorators = {
    isMdlList: [{ type: HostBinding, args: ["class.mdl-list",] }]
};
export class MdlListItemComponent {
    constructor() {
        this.isMdlListItem = true;
        this.linesIntern = 1;
    }
    get lines() {
        return this.linesIntern;
    }
    set lines(value) {
        this.linesIntern = toNumber(value);
    }
    get lines2() {
        return this.lines === 2;
    }
    get lines3() {
        return this.lines === 3;
    }
    ngOnChanges() {
        if (this.lines && this.lines > 3) {
            throw new MdlUnsupportedCountOfListItemLinesError(this.lines);
        }
    }
}
MdlListItemComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-list-item",
                template: "<ng-content></ng-content>",
                encapsulation: ViewEncapsulation.None
            },] }
];
MdlListItemComponent.propDecorators = {
    isMdlListItem: [{ type: HostBinding, args: ["class.mdl-list__item",] }],
    lines: [{ type: Input }],
    lines2: [{ type: HostBinding, args: ["class.mdl-list__item--two-line",] }],
    lines3: [{ type: HostBinding, args: ["class.mdl-list__item--three-line",] }]
};
export class MdlListItemPrimaryContentComponent {
    constructor(mdlListItemComponent) {
        this.mdlListItemComponent = mdlListItemComponent;
        this.isPrimaryContent = true;
    }
    ngOnInit() {
        if (this.mdlListItemComponent === null) {
            throw new MdlStructureError("mdl-list-item-primary-content", "mdl-list-item");
        }
    }
}
MdlListItemPrimaryContentComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-list-item-primary-content",
                template: "<ng-content></ng-content>",
                encapsulation: ViewEncapsulation.None
            },] }
];
MdlListItemPrimaryContentComponent.ctorParameters = () => [
    { type: MdlListItemComponent, decorators: [{ type: Optional }] }
];
MdlListItemPrimaryContentComponent.propDecorators = {
    isPrimaryContent: [{ type: HostBinding, args: ["class.mdl-list__item-primary-content",] }]
};
export class MdlListItemSecondaryContentComponent {
    constructor(mdlListItemComponent) {
        this.mdlListItemComponent = mdlListItemComponent;
        this.isSecondaryContent = true;
    }
    ngOnInit() {
        if (this.mdlListItemComponent === null) {
            throw new MdlStructureError("mdl-list-item-secondary-content", "mdl-list-item");
        }
    }
}
MdlListItemSecondaryContentComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-list-item-secondary-content",
                template: "<ng-content></ng-content>",
                encapsulation: ViewEncapsulation.None
            },] }
];
MdlListItemSecondaryContentComponent.ctorParameters = () => [
    { type: MdlListItemComponent, decorators: [{ type: Optional }] }
];
MdlListItemSecondaryContentComponent.propDecorators = {
    isSecondaryContent: [{ type: HostBinding, args: ["class.mdl-list__item-secondary-content",] }]
};
export class MdlListItemSecondaryActionComponent {
    constructor(mdlListItemComponent) {
        this.mdlListItemComponent = mdlListItemComponent;
        this.isSecondaryAction = true;
    }
    ngOnInit() {
        if (this.mdlListItemComponent === null) {
            throw new MdlStructureError("mdl-list-item-secondary-action", "mdl-list-item");
        }
    }
}
MdlListItemSecondaryActionComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-list-item-secondary-action",
                template: "<ng-content></ng-content>",
                encapsulation: ViewEncapsulation.None
            },] }
];
MdlListItemSecondaryActionComponent.ctorParameters = () => [
    { type: MdlListItemComponent, decorators: [{ type: Optional }] }
];
MdlListItemSecondaryActionComponent.propDecorators = {
    isSecondaryAction: [{ type: HostBinding, args: ["class.mdl-list__item-secondary-action",] }]
};
export class MdlListItemSubTitleComponent {
    constructor(mdlListItemComponent) {
        this.mdlListItemComponent = mdlListItemComponent;
        this.isSubTitle = true;
    }
    ngOnInit() {
        if (this.mdlListItemComponent === null) {
            throw new MdlStructureError("mdl-list-item-sub-title", "mdl-list-item-primary-content");
        }
    }
}
MdlListItemSubTitleComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-list-item-sub-title",
                template: "<ng-content></ng-content>",
                encapsulation: ViewEncapsulation.None
            },] }
];
MdlListItemSubTitleComponent.ctorParameters = () => [
    { type: MdlListItemPrimaryContentComponent, decorators: [{ type: Optional }] }
];
MdlListItemSubTitleComponent.propDecorators = {
    isSubTitle: [{ type: HostBinding, args: ["class.mdl-list__item-sub-title",] }]
};
export class MdlListItemSecondaryInfoComponent {
    constructor(mdlListItemComponent) {
        this.mdlListItemComponent = mdlListItemComponent;
        this.isSecondaryInfo = true;
    }
    ngOnInit() {
        if (this.mdlListItemComponent === null) {
            throw new MdlStructureError("mdl-list-item-secondary-info", "mdl-list-item-secondary-content");
        }
    }
}
MdlListItemSecondaryInfoComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-list-item-secondary-info",
                template: "<ng-content></ng-content>",
                encapsulation: ViewEncapsulation.None
            },] }
];
MdlListItemSecondaryInfoComponent.ctorParameters = () => [
    { type: MdlListItemSecondaryContentComponent, decorators: [{ type: Optional }] }
];
MdlListItemSecondaryInfoComponent.propDecorators = {
    isSecondaryInfo: [{ type: HostBinding, args: ["class.mdl-list__item-secondary-info",] }]
};
export class MdlListItemTextBodyComponent {
    constructor(mdlListItemComponent) {
        this.mdlListItemComponent = mdlListItemComponent;
        this.isTextBody = true;
    }
    ngOnInit() {
        if (this.mdlListItemComponent === null) {
            throw new MdlStructureError("mdl-list-item-text-body", "mdl-list-item");
        }
    }
}
MdlListItemTextBodyComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-list-item-text-body",
                template: "<ng-content></ng-content>",
                encapsulation: ViewEncapsulation.None
            },] }
];
MdlListItemTextBodyComponent.ctorParameters = () => [
    { type: MdlListItemComponent, decorators: [{ type: Optional }] }
];
MdlListItemTextBodyComponent.propDecorators = {
    isTextBody: [{ type: HostBinding, args: ["class.mdl-list__item-text-body",] }]
};
export class MdlListItemIconDirective {
    constructor() {
        this.isItemIcon = true;
    }
}
MdlListItemIconDirective.decorators = [
    { type: Directive, args: [{
                // eslint-disable-next-line
                selector: 'mdl-icon[mdl-list-item-icon]'
            },] }
];
MdlListItemIconDirective.propDecorators = {
    isItemIcon: [{ type: HostBinding, args: ["class.mdl-list__item-icon",] }]
};
export class MdlListItemAvatarDirective {
    constructor() {
        this.isItemAvatar = true;
    }
}
MdlListItemAvatarDirective.decorators = [
    { type: Directive, args: [{
                // eslint-disable-next-line
                selector: 'mdl-icon[mdl-list-item-avatar]'
            },] }
];
MdlListItemAvatarDirective.propDecorators = {
    isItemAvatar: [{ type: HostBinding, args: ["class.mdl-list__item-avatar",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRsLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvbGliL2xpc3QvbWRsLWxpc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBR0wsUUFBUSxFQUNSLGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXJELE1BQU0sT0FBTyx1Q0FBd0MsU0FBUSxRQUFRO0lBQ25FLFlBQVksS0FBc0I7UUFDaEMsMEJBQTBCO1FBQzFCLEtBQUssQ0FBQyxJQUFJLEtBQUssMENBQTBDLENBQUMsQ0FBQztJQUM3RCxDQUFDO0NBQ0Y7QUFPRCxNQUFNLE9BQU8sZ0JBQWdCO0lBTDdCO1FBT0UsY0FBUyxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDOzs7WUFSQSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2FBQ3RDOzs7d0JBRUUsV0FBVyxTQUFDLGdCQUFnQjs7QUFTL0IsTUFBTSxPQUFPLG9CQUFvQjtJQUxqQztRQU9FLGtCQUFhLEdBQUcsSUFBSSxDQUFDO1FBRWIsZ0JBQVcsR0FBRyxDQUFDLENBQUM7SUF3QjFCLENBQUM7SUF0QkMsSUFDSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFJLEtBQUssQ0FBQyxLQUFhO1FBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JD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RixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtnQkFDbkMsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7YUFDdEM7OztZQUt1RCxvQkFBb0IsdUJBQTdELFFBQVE7Ozt5QkFIcEIsV0FBVyxTQUFDLGdDQUFnQzs7QUFnQi9DLE1BQU0sT0FBTyx3QkFBd0I7SUFKckM7UUFNRSxlQUFVLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLENBQUM7OztZQVBBLFNBQVMsU0FBQztnQkFDVCwyQkFBMkI7Z0JBQzNCLFFBQVEsRUFBRSw4QkFBOEI7YUFDekM7Ozt5QkFFRSxXQUFXLFNBQUMsMkJBQTJCOztBQVExQyxNQUFNLE9BQU8sMEJBQTBCO0lBSnZDO1FBTUUsaUJBQVksR0FBRyxJQUFJLENBQUM7SUFDdEIsQ0FBQzs7O1lBUEEsU0FBUyxTQUFDO2dCQUNULDJCQUEyQjtnQkFDM0IsUUFBUSxFQUFFLGdDQUFnQzthQUMzQzs7OzJCQUVFLFdBQVcsU0FBQyw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIERpcmVjdGl2ZSxcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uSW5pdCxcbiAgT3B0aW9uYWwsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgTWRsRXJyb3IsIE1kbFN0cnVjdHVyZUVycm9yIH0gZnJvbSBcIi4uL2NvbW1vbi9tZGwtZXJyb3JcIjtcbmltcG9ydCB7IHRvTnVtYmVyIH0gZnJvbSBcIi4uL2NvbW1vbi9udW1iZXIucHJvcGVydHlcIjtcblxuZXhwb3J0IGNsYXNzIE1kbFVuc3VwcG9ydGVkQ291bnRPZkxpc3RJdGVtTGluZXNFcnJvciBleHRlbmRzIE1kbEVycm9yIHtcbiAgY29uc3RydWN0b3IobGluZXM6IG51bWJlciB8IHN0cmluZykge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgc3VwZXIoYFwiJHtsaW5lc31cIiBpcyBub3Qgc3VwcG9ydGVkIC0gbWF4IDMgbGluZXMgcGxlYXNlLmApO1xuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJtZGwtbGlzdFwiLFxuICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XCIsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG59KVxuZXhwb3J0IGNsYXNzIE1kbExpc3RDb21wb25lbnQge1xuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5tZGwtbGlzdFwiKVxuICBpc01kbExpc3QgPSB0cnVlO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwibWRsLWxpc3QtaXRlbVwiLFxuICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XCIsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG59KVxuZXhwb3J0IGNsYXNzIE1kbExpc3RJdGVtQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQEhvc3RCaW5kaW5nKFwiY2xhc3MubWRsLWxpc3RfX2l0ZW1cIilcbiAgaXNNZGxMaXN0SXRlbSA9IHRydWU7XG5cbiAgcHJpdmF0ZSBsaW5lc0ludGVybiA9IDE7XG5cbiAgQElucHV0KClcbiAgZ2V0IGxpbmVzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubGluZXNJbnRlcm47XG4gIH1cblxuICBzZXQgbGluZXModmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMubGluZXNJbnRlcm4gPSB0b051bWJlcih2YWx1ZSk7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5tZGwtbGlzdF9faXRlbS0tdHdvLWxpbmVcIikgZ2V0IGxpbmVzMigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5saW5lcyA9PT0gMjtcbiAgfVxuXG4gIEBIb3N0QmluZGluZyhcImNsYXNzLm1kbC1saXN0X19pdGVtLS10aHJlZS1saW5lXCIpIGdldCBsaW5lczMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubGluZXMgPT09IDM7XG4gIH1cblxuICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5saW5lcyAmJiB0aGlzLmxpbmVzID4gMykge1xuICAgICAgdGhyb3cgbmV3IE1kbFVuc3VwcG9ydGVkQ291bnRPZkxpc3RJdGVtTGluZXNFcnJvcih0aGlzLmxpbmVzKTtcbiAgICB9XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcIm1kbC1saXN0LWl0ZW0tcHJpbWFyeS1jb250ZW50XCIsXG4gIHRlbXBsYXRlOiBcIjxuZy1jb250ZW50PjwvbmctY29udGVudD5cIixcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgTWRsTGlzdEl0ZW1QcmltYXJ5Q29udGVudENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBIb3N0QmluZGluZyhcImNsYXNzLm1kbC1saXN0X19pdGVtLXByaW1hcnktY29udGVudFwiKVxuICBpc1ByaW1hcnlDb250ZW50ID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIG1kbExpc3RJdGVtQ29tcG9uZW50OiBNZGxMaXN0SXRlbUNvbXBvbmVudCkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tZGxMaXN0SXRlbUNvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IE1kbFN0cnVjdHVyZUVycm9yKFxuICAgICAgICBcIm1kbC1saXN0LWl0ZW0tcHJpbWFyeS1jb250ZW50XCIsXG4gICAgICAgIFwibWRsLWxpc3QtaXRlbVwiXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwibWRsLWxpc3QtaXRlbS1zZWNvbmRhcnktY29udGVudFwiLFxuICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XCIsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG59KVxuZXhwb3J0IGNsYXNzIE1kbExpc3RJdGVtU2Vjb25kYXJ5Q29udGVudENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBIb3N0QmluZGluZyhcImNsYXNzLm1kbC1saXN0X19pdGVtLXNlY29uZGFyeS1jb250ZW50XCIpXG4gIGlzU2Vjb25kYXJ5Q29udGVudCA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHJpdmF0ZSBtZGxMaXN0SXRlbUNvbXBvbmVudDogTWRsTGlzdEl0ZW1Db21wb25lbnQpIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubWRsTGlzdEl0ZW1Db21wb25lbnQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBNZGxTdHJ1Y3R1cmVFcnJvcihcbiAgICAgICAgXCJtZGwtbGlzdC1pdGVtLXNlY29uZGFyeS1jb250ZW50XCIsXG4gICAgICAgIFwibWRsLWxpc3QtaXRlbVwiXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwibWRsLWxpc3QtaXRlbS1zZWNvbmRhcnktYWN0aW9uXCIsXG4gIHRlbXBsYXRlOiBcIjxuZy1jb250ZW50PjwvbmctY29udGVudD5cIixcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgTWRsTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5tZGwtbGlzdF9faXRlbS1zZWNvbmRhcnktYWN0aW9uXCIpXG4gIGlzU2Vjb25kYXJ5QWN0aW9uID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIG1kbExpc3RJdGVtQ29tcG9uZW50OiBNZGxMaXN0SXRlbUNvbXBvbmVudCkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tZGxMaXN0SXRlbUNvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IE1kbFN0cnVjdHVyZUVycm9yKFxuICAgICAgICBcIm1kbC1saXN0LWl0ZW0tc2Vjb25kYXJ5LWFjdGlvblwiLFxuICAgICAgICBcIm1kbC1saXN0LWl0ZW1cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcIm1kbC1saXN0LWl0ZW0tc3ViLXRpdGxlXCIsXG4gIHRlbXBsYXRlOiBcIjxuZy1jb250ZW50PjwvbmctY29udGVudD5cIixcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgTWRsTGlzdEl0ZW1TdWJUaXRsZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBIb3N0QmluZGluZyhcImNsYXNzLm1kbC1saXN0X19pdGVtLXN1Yi10aXRsZVwiKVxuICBpc1N1YlRpdGxlID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIG1kbExpc3RJdGVtQ29tcG9uZW50OiBNZGxMaXN0SXRlbVByaW1hcnlDb250ZW50Q29tcG9uZW50XG4gICkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tZGxMaXN0SXRlbUNvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IE1kbFN0cnVjdHVyZUVycm9yKFxuICAgICAgICBcIm1kbC1saXN0LWl0ZW0tc3ViLXRpdGxlXCIsXG4gICAgICAgIFwibWRsLWxpc3QtaXRlbS1wcmltYXJ5LWNvbnRlbnRcIlxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcIm1kbC1saXN0LWl0ZW0tc2Vjb25kYXJ5LWluZm9cIixcbiAgdGVtcGxhdGU6IFwiPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlwiLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxufSlcbmV4cG9ydCBjbGFzcyBNZGxMaXN0SXRlbVNlY29uZGFyeUluZm9Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5tZGwtbGlzdF9faXRlbS1zZWNvbmRhcnktaW5mb1wiKVxuICBpc1NlY29uZGFyeUluZm8gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgcHJpdmF0ZSBtZGxMaXN0SXRlbUNvbXBvbmVudDogTWRsTGlzdEl0ZW1TZWNvbmRhcnlDb250ZW50Q29tcG9uZW50XG4gICkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tZGxMaXN0SXRlbUNvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IE1kbFN0cnVjdHVyZUVycm9yKFxuICAgICAgICBcIm1kbC1saXN0LWl0ZW0tc2Vjb25kYXJ5LWluZm9cIixcbiAgICAgICAgXCJtZGwtbGlzdC1pdGVtLXNlY29uZGFyeS1jb250ZW50XCJcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJtZGwtbGlzdC1pdGVtLXRleHQtYm9keVwiLFxuICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XCIsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG59KVxuZXhwb3J0IGNsYXNzIE1kbExpc3RJdGVtVGV4dEJvZHlDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5tZGwtbGlzdF9faXRlbS10ZXh0LWJvZHlcIilcbiAgaXNUZXh0Qm9keSA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHJpdmF0ZSBtZGxMaXN0SXRlbUNvbXBvbmVudDogTWRsTGlzdEl0ZW1Db21wb25lbnQpIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubWRsTGlzdEl0ZW1Db21wb25lbnQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBNZGxTdHJ1Y3R1cmVFcnJvcihcIm1kbC1saXN0LWl0ZW0tdGV4dC1ib2R5XCIsIFwibWRsLWxpc3QtaXRlbVwiKTtcbiAgICB9XG4gIH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBzZWxlY3RvcjogJ21kbC1pY29uW21kbC1saXN0LWl0ZW0taWNvbl0nXG59KVxuZXhwb3J0IGNsYXNzIE1kbExpc3RJdGVtSWNvbkRpcmVjdGl2ZSB7XG4gIEBIb3N0QmluZGluZyhcImNsYXNzLm1kbC1saXN0X19pdGVtLWljb25cIilcbiAgaXNJdGVtSWNvbiA9IHRydWU7XG59XG5cbkBEaXJlY3RpdmUoe1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgc2VsZWN0b3I6ICdtZGwtaWNvblttZGwtbGlzdC1pdGVtLWF2YXRhcl0nXG59KVxuZXhwb3J0IGNsYXNzIE1kbExpc3RJdGVtQXZhdGFyRGlyZWN0aXZlIHtcbiAgQEhvc3RCaW5kaW5nKFwiY2xhc3MubWRsLWxpc3RfX2l0ZW0tYXZhdGFyXCIpXG4gIGlzSXRlbUF2YXRhciA9IHRydWU7XG59XG4iXX0=