import { Injectable } from "@angular/core";
export class MdlTooltipPositionService {
    calcStyle(offsetWidth, offsetHeight, props, position) {
        const result = {};
        const left = props.left + props.width / 2;
        const top = props.top + props.height / 2;
        const marginLeft = -1 * (offsetWidth / 2);
        const marginTop = -1 * (offsetHeight / 2);
        if (position === "left" || position === "right") {
            if (top + marginTop < 0) {
                result.top = "0";
                result.marginTop = "0";
            }
            else {
                result.top = top + "px";
                result.marginTop = marginTop + "px";
            }
        }
        else {
            if (left + marginLeft < 0) {
                result.left = "0";
                result.marginLeft = "0";
            }
            else {
                result.left = left + "px";
                result.marginLeft = marginLeft + "px";
            }
        }
        if (position === "top") {
            result.top = props.top - offsetHeight - 10 + "px";
        }
        else if (position === "right") {
            result.left = props.left + props.width + 10 + "px";
        }
        else if (position === "left") {
            result.left = props.left - offsetWidth - 10 + "px";
        }
        else {
            result.top = props.top + props.height + 10 + "px";
        }
        return result;
    }
}
MdlTooltipPositionService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRsLXRvb2x0aXAtcG9zaXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL2xpYi90b29sdGlwL21kbC10b29sdGlwLXBvc2l0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxNQUFNLE9BQU8seUJBQXlCO0lBQzdCLFNBQVMsQ0FDZCxXQUFtQixFQUNuQixZQUFvQixFQUNwQixLQUFpQixFQUNqQixRQUFnQjtRQUVoQixNQUFNLE1BQU0sR0FBb0MsRUFBRSxDQUFDO1FBQ25ELE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDMUMsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUN6QyxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxQyxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQztRQUUxQyxJQUFJLFFBQVEsS0FBSyxNQUFNLElBQUksUUFBUSxLQUFLLE9BQU8sRUFBRTtZQUMvQyxJQUFJLEdBQUcsR0FBRyxTQUFTLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QixNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztnQkFDakIsTUFBTSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7YUFDeEI7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO2dCQUN4QixNQUFNLENBQUMsU0FBUyxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUM7YUFDckM7U0FDRjthQUFNO1lBQ0wsSUFBSSxJQUFJLEdBQUcsVUFBVSxHQUFHLENBQUMsRUFBRTtnQkFDekIsTUFBTSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7Z0JBQ2xCLE1BQU0sQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO2FBQ3pCO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDMUIsTUFBTSxDQUFDLFVBQVUsR0FBRyxVQUFVLEdBQUcsSUFBSSxDQUFDO2FBQ3ZDO1NBQ0Y7UUFFRCxJQUFJLFFBQVEsS0FBSyxLQUFLLEVBQUU7WUFDdEIsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLFlBQVksR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO1NBQ25EO2FBQU0sSUFBSSxRQUFRLEtBQUssT0FBTyxFQUFFO1lBQy9CLE1BQU0sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7U0FDcEQ7YUFBTSxJQUFJLFFBQVEsS0FBSyxNQUFNLEVBQUU7WUFDOUIsTUFBTSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLFdBQVcsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO1NBQ3BEO2FBQU07WUFDTCxNQUFNLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO1NBQ25EO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7O1lBM0NGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1kbFRvb2x0aXBQb3NpdGlvblNlcnZpY2Uge1xuICBwdWJsaWMgY2FsY1N0eWxlKFxuICAgIG9mZnNldFdpZHRoOiBudW1iZXIsXG4gICAgb2Zmc2V0SGVpZ2h0OiBudW1iZXIsXG4gICAgcHJvcHM6IENsaWVudFJlY3QsXG4gICAgcG9zaXRpb246IHN0cmluZ1xuICApOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogdW5rbm93biB9IHtcbiAgICBjb25zdCByZXN1bHQ6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiB1bmtub3duIH0gPSB7fTtcbiAgICBjb25zdCBsZWZ0ID0gcHJvcHMubGVmdCArIHByb3BzLndpZHRoIC8gMjtcbiAgICBjb25zdCB0b3AgPSBwcm9wcy50b3AgKyBwcm9wcy5oZWlnaHQgLyAyO1xuICAgIGNvbnN0IG1hcmdpbkxlZnQgPSAtMSAqIChvZmZzZXRXaWR0aCAvIDIpO1xuICAgIGNvbnN0IG1hcmdpblRvcCA9IC0xICogKG9mZnNldEhlaWdodCAvIDIpO1xuXG4gICAgaWYgKHBvc2l0aW9uID09PSBcImxlZnRcIiB8fCBwb3NpdGlvbiA9PT0gXCJyaWdodFwiKSB7XG4gICAgICBpZiAodG9wICsgbWFyZ2luVG9wIDwgMCkge1xuICAgICAgICByZXN1bHQudG9wID0gXCIwXCI7XG4gICAgICAgIHJlc3VsdC5tYXJnaW5Ub3AgPSBcIjBcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC50b3AgPSB0b3AgKyBcInB4XCI7XG4gICAgICAgIHJlc3VsdC5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3AgKyBcInB4XCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsZWZ0ICsgbWFyZ2luTGVmdCA8IDApIHtcbiAgICAgICAgcmVzdWx0LmxlZnQgPSBcIjBcIjtcbiAgICAgICAgcmVzdWx0Lm1hcmdpbkxlZnQgPSBcIjBcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5sZWZ0ID0gbGVmdCArIFwicHhcIjtcbiAgICAgICAgcmVzdWx0Lm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0ICsgXCJweFwiO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA9PT0gXCJ0b3BcIikge1xuICAgICAgcmVzdWx0LnRvcCA9IHByb3BzLnRvcCAtIG9mZnNldEhlaWdodCAtIDEwICsgXCJweFwiO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09IFwicmlnaHRcIikge1xuICAgICAgcmVzdWx0LmxlZnQgPSBwcm9wcy5sZWZ0ICsgcHJvcHMud2lkdGggKyAxMCArIFwicHhcIjtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSBcImxlZnRcIikge1xuICAgICAgcmVzdWx0LmxlZnQgPSBwcm9wcy5sZWZ0IC0gb2Zmc2V0V2lkdGggLSAxMCArIFwicHhcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnRvcCA9IHByb3BzLnRvcCArIHByb3BzLmhlaWdodCArIDEwICsgXCJweFwiO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==