import { ComponentFactoryResolver, Directive, HostListener, Input, ViewContainerRef, } from "@angular/core";
import { MdlSimpleTooltipComponent, MdlTooltipComponent, } from "./mdl-tooltip.component";
export class AbstractMdlTooltipDirective {
    constructor(vcRef, large, componentFactoryResolver) {
        this.vcRef = vcRef;
        this.large = large;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    onMouseEnter(event) {
        this.tooltipComponent.mouseEnter(event);
    }
    onMouseLeave() {
        this.tooltipComponent.mouseLeave();
    }
    ngOnInit() {
        // if the tooltip is not an instance of MdlTooltipComponent
        // we create a simpleTooltipComponent on the fly.
        if (!(this.tooltip instanceof MdlTooltipComponent)) {
            const cFactory = this.componentFactoryResolver.resolveComponentFactory(MdlSimpleTooltipComponent);
            const cRef = this.vcRef.createComponent(cFactory);
            this.tooltipComponent = cRef.instance;
            this.tooltipComponent.tooltipText = this.tooltip;
            this.configureTooltipComponent();
        }
        else {
            this.tooltipComponent = this.tooltip;
            this.configureTooltipComponent();
        }
    }
    ngOnChanges(changes) {
        if (changes.tooltip && !changes.tooltip.isFirstChange()) {
            if (!(this.tooltip instanceof MdlTooltipComponent)) {
                this.tooltipComponent.tooltipText = this.tooltip;
            }
        }
    }
    configureTooltipComponent() {
        this.tooltipComponent.large = this.large;
        this.tooltipComponent.position = this.position;
    }
}
AbstractMdlTooltipDirective.decorators = [
    { type: Directive }
];
AbstractMdlTooltipDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Boolean },
    { type: ComponentFactoryResolver }
];
AbstractMdlTooltipDirective.propDecorators = {
    onMouseEnter: [{ type: HostListener, args: ["touchend", ["$event"],] }, { type: HostListener, args: ["mouseenter", ["$event"],] }],
    onMouseLeave: [{ type: HostListener, args: ["window:touchstart",] }, { type: HostListener, args: ["mouseleave",] }]
};
export class MdlTooltipDirective extends AbstractMdlTooltipDirective {
    constructor(vcRef, componentFactoryResolver) {
        super(vcRef, false, componentFactoryResolver);
    }
}
MdlTooltipDirective.decorators = [
    { type: Directive, args: [{
                // eslint-disable-next-line
                selector: '[mdl-tooltip]'
            },] }
];
MdlTooltipDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver }
];
MdlTooltipDirective.propDecorators = {
    tooltip: [{ type: Input, args: ["mdl-tooltip",] }],
    position: [{ type: Input, args: ["mdl-tooltip-position",] }]
};
export class MdlTooltipLargeDirective extends AbstractMdlTooltipDirective {
    constructor(vcRef, componentFactoryResolver) {
        super(vcRef, true, componentFactoryResolver);
    }
}
MdlTooltipLargeDirective.decorators = [
    { type: Directive, args: [{
                // eslint-disable-next-line
                selector: '[mdl-tooltip-large]'
            },] }
];
MdlTooltipLargeDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver }
];
MdlTooltipLargeDirective.propDecorators = {
    tooltip: [{ type: Input, args: ["mdl-tooltip-large",] }],
    position: [{ type: Input, args: ["mdl-tooltip-position",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRsLXRvb2x0aXAuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvbGliL3Rvb2x0aXAvbWRsLXRvb2x0aXAuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx3QkFBd0IsRUFFeEIsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBSUwsZ0JBQWdCLEdBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDTCx5QkFBeUIsRUFDekIsbUJBQW1CLEdBQ3BCLE1BQU0seUJBQXlCLENBQUM7QUFHakMsTUFBTSxPQUFnQiwyQkFBMkI7SUFNL0MsWUFDVSxLQUF1QixFQUN2QixLQUFjLEVBQ2Qsd0JBQWtEO1FBRmxELFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQ3ZCLFVBQUssR0FBTCxLQUFLLENBQVM7UUFDZCw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO0lBQ3pELENBQUM7SUFJSixZQUFZLENBQUMsS0FBaUI7UUFDNUIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBSUQsWUFBWTtRQUNWLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRUQsUUFBUTtRQUNOLDJEQUEyRDtRQUMzRCxpREFBaUQ7UUFDakQsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sWUFBWSxtQkFBbUIsQ0FBQyxFQUFFO1lBQ2xELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyx1QkFBdUIsQ0FDcEUseUJBQXlCLENBQzFCLENBQUM7WUFDRixNQUFNLElBQUksR0FBNEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQzlFLFFBQVEsQ0FDVCxDQUFDO1lBRUYsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxRQUFxQyxDQUFDO1lBQ25FLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNqRCxJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztTQUNsQzthQUFNO1lBQ0wsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDckMsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7U0FDbEM7SUFDSCxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDdkQsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sWUFBWSxtQkFBbUIsQ0FBQyxFQUFFO2dCQUNsRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7YUFDbEQ7U0FDRjtJQUNILENBQUM7SUFFTyx5QkFBeUI7UUFDL0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUNqRCxDQUFDOzs7WUF4REYsU0FBUzs7O1lBUFIsZ0JBQWdCOztZQVJoQix3QkFBd0I7OzsyQkE0QnZCLFlBQVksU0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLENBQUMsY0FDbkMsWUFBWSxTQUFDLFlBQVksRUFBRSxDQUFDLFFBQVEsQ0FBQzsyQkFLckMsWUFBWSxTQUFDLG1CQUFtQixjQUNoQyxZQUFZLFNBQUMsWUFBWTs7QUEyQzVCLE1BQU0sT0FBTyxtQkFBb0IsU0FBUSwyQkFBMkI7SUFTbEUsWUFDRSxLQUF1QixFQUN2Qix3QkFBa0Q7UUFFbEQsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7WUFsQkYsU0FBUyxTQUFDO2dCQUNULDJCQUEyQjtnQkFDM0IsUUFBUSxFQUFFLGVBQWU7YUFDMUI7OztZQXJFQyxnQkFBZ0I7WUFSaEIsd0JBQXdCOzs7c0JBK0V2QixLQUFLLFNBQUMsYUFBYTt1QkFFbkIsS0FBSyxTQUFDLHNCQUFzQjs7QUFrQi9CLE1BQU0sT0FBTyx3QkFBeUIsU0FBUSwyQkFBMkI7SUFTdkUsWUFDRSxLQUF1QixFQUN2Qix3QkFBa0Q7UUFFbEQsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7WUFsQkYsU0FBUyxTQUFDO2dCQUNULDJCQUEyQjtnQkFDM0IsUUFBUSxFQUFFLHFCQUFxQjthQUNoQzs7O1lBMUZDLGdCQUFnQjtZQVJoQix3QkFBd0I7OztzQkFvR3ZCLEtBQUssU0FBQyxtQkFBbUI7dUJBRXpCLEtBQUssU0FBQyxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIENvbXBvbmVudFJlZixcbiAgRGlyZWN0aXZlLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uSW5pdCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7XG4gIE1kbFNpbXBsZVRvb2x0aXBDb21wb25lbnQsXG4gIE1kbFRvb2x0aXBDb21wb25lbnQsXG59IGZyb20gXCIuL21kbC10b29sdGlwLmNvbXBvbmVudFwiO1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdE1kbFRvb2x0aXBEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIHByb3RlY3RlZCB0b29sdGlwOiBzdHJpbmcgfCBNZGxUb29sdGlwQ29tcG9uZW50O1xuICBwcm90ZWN0ZWQgcG9zaXRpb246IFwibGVmdFwiIHwgXCJyaWdodFwiIHwgXCJ0b3BcIiB8IFwiYm90dG9tXCI7XG5cbiAgcHJvdGVjdGVkIHRvb2x0aXBDb21wb25lbnQ6IE1kbFNpbXBsZVRvb2x0aXBDb21wb25lbnQ7XG5cbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmNSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSBsYXJnZTogYm9vbGVhbixcbiAgICBwcml2YXRlIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyXG4gICkge31cblxuICBASG9zdExpc3RlbmVyKFwidG91Y2hlbmRcIiwgW1wiJGV2ZW50XCJdKVxuICBASG9zdExpc3RlbmVyKFwibW91c2VlbnRlclwiLCBbXCIkZXZlbnRcIl0pXG4gIG9uTW91c2VFbnRlcihldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIHRoaXMudG9vbHRpcENvbXBvbmVudC5tb3VzZUVudGVyKGV2ZW50KTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoXCJ3aW5kb3c6dG91Y2hzdGFydFwiKVxuICBASG9zdExpc3RlbmVyKFwibW91c2VsZWF2ZVwiKVxuICBvbk1vdXNlTGVhdmUoKTogdm9pZCB7XG4gICAgdGhpcy50b29sdGlwQ29tcG9uZW50Lm1vdXNlTGVhdmUoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIC8vIGlmIHRoZSB0b29sdGlwIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBNZGxUb29sdGlwQ29tcG9uZW50XG4gICAgLy8gd2UgY3JlYXRlIGEgc2ltcGxlVG9vbHRpcENvbXBvbmVudCBvbiB0aGUgZmx5LlxuICAgIGlmICghKHRoaXMudG9vbHRpcCBpbnN0YW5jZW9mIE1kbFRvb2x0aXBDb21wb25lbnQpKSB7XG4gICAgICBjb25zdCBjRmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFxuICAgICAgICBNZGxTaW1wbGVUb29sdGlwQ29tcG9uZW50XG4gICAgICApO1xuICAgICAgY29uc3QgY1JlZjogQ29tcG9uZW50UmVmPE1kbFNpbXBsZVRvb2x0aXBDb21wb25lbnQ+ID0gdGhpcy52Y1JlZi5jcmVhdGVDb21wb25lbnQoXG4gICAgICAgIGNGYWN0b3J5XG4gICAgICApO1xuXG4gICAgICB0aGlzLnRvb2x0aXBDb21wb25lbnQgPSBjUmVmLmluc3RhbmNlIGFzIE1kbFNpbXBsZVRvb2x0aXBDb21wb25lbnQ7XG4gICAgICB0aGlzLnRvb2x0aXBDb21wb25lbnQudG9vbHRpcFRleHQgPSB0aGlzLnRvb2x0aXA7XG4gICAgICB0aGlzLmNvbmZpZ3VyZVRvb2x0aXBDb21wb25lbnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50b29sdGlwQ29tcG9uZW50ID0gdGhpcy50b29sdGlwO1xuICAgICAgdGhpcy5jb25maWd1cmVUb29sdGlwQ29tcG9uZW50KCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLnRvb2x0aXAgJiYgIWNoYW5nZXMudG9vbHRpcC5pc0ZpcnN0Q2hhbmdlKCkpIHtcbiAgICAgIGlmICghKHRoaXMudG9vbHRpcCBpbnN0YW5jZW9mIE1kbFRvb2x0aXBDb21wb25lbnQpKSB7XG4gICAgICAgIHRoaXMudG9vbHRpcENvbXBvbmVudC50b29sdGlwVGV4dCA9IHRoaXMudG9vbHRpcDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNvbmZpZ3VyZVRvb2x0aXBDb21wb25lbnQoKSB7XG4gICAgdGhpcy50b29sdGlwQ29tcG9uZW50LmxhcmdlID0gdGhpcy5sYXJnZTtcbiAgICB0aGlzLnRvb2x0aXBDb21wb25lbnQucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uO1xuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgc2VsZWN0b3I6ICdbbWRsLXRvb2x0aXBdJ1xufSlcbmV4cG9ydCBjbGFzcyBNZGxUb29sdGlwRGlyZWN0aXZlIGV4dGVuZHMgQWJzdHJhY3RNZGxUb29sdGlwRGlyZWN0aXZlIHtcbiAgQElucHV0KFwibWRsLXRvb2x0aXBcIikgcHVibGljIHRvb2x0aXA6IHN0cmluZyB8IE1kbFRvb2x0aXBDb21wb25lbnQ7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvbm8taW5wdXQtcmVuYW1lXG4gIEBJbnB1dChcIm1kbC10b29sdGlwLXBvc2l0aW9uXCIpIHB1YmxpYyBwb3NpdGlvbjpcbiAgICB8IFwibGVmdFwiXG4gICAgfCBcInJpZ2h0XCJcbiAgICB8IFwidG9wXCJcbiAgICB8IFwiYm90dG9tXCI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgdmNSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcbiAgKSB7XG4gICAgc3VwZXIodmNSZWYsIGZhbHNlLCBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpO1xuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgc2VsZWN0b3I6ICdbbWRsLXRvb2x0aXAtbGFyZ2VdJ1xufSlcbmV4cG9ydCBjbGFzcyBNZGxUb29sdGlwTGFyZ2VEaXJlY3RpdmUgZXh0ZW5kcyBBYnN0cmFjdE1kbFRvb2x0aXBEaXJlY3RpdmUge1xuICBASW5wdXQoXCJtZGwtdG9vbHRpcC1sYXJnZVwiKSBwdWJsaWMgdG9vbHRpcDogc3RyaW5nIHwgTWRsVG9vbHRpcENvbXBvbmVudDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1pbnB1dC1yZW5hbWVcbiAgQElucHV0KFwibWRsLXRvb2x0aXAtcG9zaXRpb25cIikgcHVibGljIHBvc2l0aW9uOlxuICAgIHwgXCJsZWZ0XCJcbiAgICB8IFwicmlnaHRcIlxuICAgIHwgXCJ0b3BcIlxuICAgIHwgXCJib3R0b21cIjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICB2Y1JlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlclxuICApIHtcbiAgICBzdXBlcih2Y1JlZiwgdHJ1ZSwgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyKTtcbiAgfVxufVxuIl19