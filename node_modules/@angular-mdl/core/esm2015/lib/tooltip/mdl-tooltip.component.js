import { Component, ElementRef, HostBinding, Input, Renderer2, ViewEncapsulation, } from "@angular/core";
import { MdlTooltipPositionService } from "./mdl-tooltip-position.service";
const IS_ACTIVE = "is-active";
export class MdlSimpleTooltipComponent {
    constructor(elRef, renderer, mdlTooltipPositionService) {
        this.elRef = elRef;
        this.renderer = renderer;
        this.mdlTooltipPositionService = mdlTooltipPositionService;
        this.large = false;
        this.isTooltip = true;
        this.active = false;
        this.element = elRef.nativeElement;
    }
    get isBottom() {
        return this.position === "bottom";
    }
    get isRight() {
        return this.position === "right";
    }
    get isLeft() {
        return this.position === "left";
    }
    isTop() {
        return this.position === "top";
    }
    mouseLeave() {
        if (this.delayTimeout) {
            clearTimeout(this.delayTimeout);
        }
        this.setActive(false);
    }
    mouseEnter(event) {
        if (this.delay) {
            this.delayTimeout = setTimeout(() => {
                this.show(event.target);
            }, this.delay);
        }
        else {
            this.show(event.target);
        }
    }
    isActive() {
        return this.active;
    }
    show(element) {
        const props = element.getBoundingClientRect();
        const offsetWidth = this.element.offsetWidth;
        const offsetHeight = this.element.offsetHeight;
        const style = this.mdlTooltipPositionService.calcStyle(offsetWidth, offsetHeight, props, this.position);
        for (const key of Object.keys(style)) {
            this.renderer.setStyle(this.elRef.nativeElement, key, style[key]);
        }
        this.setActive(true);
    }
    setActive(active) {
        this.active = active;
        if (active) {
            this.renderer.addClass(this.elRef.nativeElement, IS_ACTIVE);
        }
        else {
            this.renderer.removeClass(this.elRef.nativeElement, IS_ACTIVE);
        }
    }
}
MdlSimpleTooltipComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-simple-tooltip",
                template: "<div>{{tooltipText}}</div>",
                providers: [MdlTooltipPositionService],
                encapsulation: ViewEncapsulation.None
            },] }
];
MdlSimpleTooltipComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: MdlTooltipPositionService }
];
MdlSimpleTooltipComponent.propDecorators = {
    large: [{ type: HostBinding, args: ["class.mdl-tooltip--large",] }],
    position: [{ type: Input }],
    delay: [{ type: Input }],
    isTooltip: [{ type: HostBinding, args: ["class.mdl-tooltip",] }],
    isBottom: [{ type: HostBinding, args: ["class.mdl-tooltip--bottom",] }],
    isRight: [{ type: HostBinding, args: ["class.mdl-tooltip--right",] }],
    isLeft: [{ type: HostBinding, args: ["class.mdl-tooltip--left",] }],
    isTop: [{ type: HostBinding, args: ["class.mdl-tooltip--top",] }]
};
export class MdlTooltipComponent extends MdlSimpleTooltipComponent {
    constructor(elRef, renderer, mdlTooltipPositionService) {
        super(elRef, renderer, mdlTooltipPositionService);
    }
}
MdlTooltipComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-tooltip",
                template: "<div><ng-content></ng-content></div>",
                exportAs: "mdlTooltip",
                providers: [MdlTooltipPositionService],
                encapsulation: ViewEncapsulation.None
            },] }
];
MdlTooltipComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: MdlTooltipPositionService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRsLXRvb2x0aXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvbGliL3Rvb2x0aXAvbWRsLXRvb2x0aXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFdBQVcsRUFDWCxLQUFLLEVBQ0wsU0FBUyxFQUNULGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUUzRSxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUM7QUFROUIsTUFBTSxPQUFPLHlCQUF5QjtJQW1CcEMsWUFDVSxLQUFpQixFQUNqQixRQUFtQixFQUNuQix5QkFBb0Q7UUFGcEQsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQUNqQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBMkI7UUFwQjlELFVBQUssR0FBRyxLQUFLLENBQUM7UUFTZCxjQUFTLEdBQUcsSUFBSSxDQUFDO1FBS2pCLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFRYixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7SUFDckMsQ0FBQztJQUVELElBQThDLFFBQVE7UUFDcEQsT0FBTyxJQUFJLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQztJQUNwQyxDQUFDO0lBRUQsSUFBNkMsT0FBTztRQUNsRCxPQUFPLElBQUksQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDO0lBQ25DLENBQUM7SUFFRCxJQUE0QyxNQUFNO1FBQ2hELE9BQU8sSUFBSSxDQUFDLFFBQVEsS0FBSyxNQUFNLENBQUM7SUFDbEMsQ0FBQztJQUVzQyxLQUFLO1FBQzFDLE9BQU8sSUFBSSxDQUFDLFFBQVEsS0FBSyxLQUFLLENBQUM7SUFDakMsQ0FBQztJQUVELFVB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QUFFLENBQUMseUJBQXlCLENBQUM7Z0JBQ3RDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2FBQ3RDOzs7WUFuSEMsVUFBVTtZQUdWLFNBQVM7WUFHRix5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgUmVuZGVyZXIyLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE1kbFRvb2x0aXBQb3NpdGlvblNlcnZpY2UgfSBmcm9tIFwiLi9tZGwtdG9vbHRpcC1wb3NpdGlvbi5zZXJ2aWNlXCI7XG5cbmNvbnN0IElTX0FDVElWRSA9IFwiaXMtYWN0aXZlXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJtZGwtc2ltcGxlLXRvb2x0aXBcIixcbiAgdGVtcGxhdGU6IFwiPGRpdj57e3Rvb2x0aXBUZXh0fX08L2Rpdj5cIixcbiAgcHJvdmlkZXJzOiBbTWRsVG9vbHRpcFBvc2l0aW9uU2VydmljZV0sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG59KVxuZXhwb3J0IGNsYXNzIE1kbFNpbXBsZVRvb2x0aXBDb21wb25lbnQge1xuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5tZGwtdG9vbHRpcC0tbGFyZ2VcIilcbiAgbGFyZ2UgPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBwb3NpdGlvbjogXCJsZWZ0XCIgfCBcInJpZ2h0XCIgfCBcInRvcFwiIHwgXCJib3R0b21cIjtcblxuICBASW5wdXQoKVxuICBkZWxheTogbnVtYmVyO1xuXG4gIEBIb3N0QmluZGluZyhcImNsYXNzLm1kbC10b29sdGlwXCIpXG4gIGlzVG9vbHRpcCA9IHRydWU7XG5cbiAgdG9vbHRpcFRleHQ6IHN0cmluZztcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG5cbiAgYWN0aXZlID0gZmFsc2U7XG4gIGRlbGF5VGltZW91dDogdW5rbm93bjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsUmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIG1kbFRvb2x0aXBQb3NpdGlvblNlcnZpY2U6IE1kbFRvb2x0aXBQb3NpdGlvblNlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxSZWYubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIEBIb3N0QmluZGluZyhcImNsYXNzLm1kbC10b29sdGlwLS1ib3R0b21cIikgZ2V0IGlzQm90dG9tKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uID09PSBcImJvdHRvbVwiO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKFwiY2xhc3MubWRsLXRvb2x0aXAtLXJpZ2h0XCIpIGdldCBpc1JpZ2h0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uID09PSBcInJpZ2h0XCI7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5tZGwtdG9vbHRpcC0tbGVmdFwiKSBnZXQgaXNMZWZ0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uID09PSBcImxlZnRcIjtcbiAgfVxuXG4gIEBIb3N0QmluZGluZyhcImNsYXNzLm1kbC10b29sdGlwLS10b3BcIikgaXNUb3AoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb24gPT09IFwidG9wXCI7XG4gIH1cblxuICBtb3VzZUxlYXZlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRlbGF5VGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVsYXlUaW1lb3V0IGFzIG51bWJlcik7XG4gICAgfVxuICAgIHRoaXMuc2V0QWN0aXZlKGZhbHNlKTtcbiAgfVxuXG4gIG1vdXNlRW50ZXIoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZGVsYXkpIHtcbiAgICAgIHRoaXMuZGVsYXlUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2hvdyhldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQpO1xuICAgICAgfSwgdGhpcy5kZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvdyhldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIGlzQWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZTtcbiAgfVxuXG4gIHByaXZhdGUgc2hvdyhlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IHByb3BzID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBvZmZzZXRXaWR0aCA9IHRoaXMuZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICBjb25zdCBvZmZzZXRIZWlnaHQgPSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY29uc3Qgc3R5bGUgPSB0aGlzLm1kbFRvb2x0aXBQb3NpdGlvblNlcnZpY2UuY2FsY1N0eWxlKFxuICAgICAgb2Zmc2V0V2lkdGgsXG4gICAgICBvZmZzZXRIZWlnaHQsXG4gICAgICBwcm9wcyxcbiAgICAgIHRoaXMucG9zaXRpb25cbiAgICApO1xuXG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc3R5bGUpKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudCwga2V5LCBzdHlsZVtrZXldKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldEFjdGl2ZSh0cnVlKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0QWN0aXZlKGFjdGl2ZTogYm9vbGVhbikge1xuICAgIHRoaXMuYWN0aXZlID0gYWN0aXZlO1xuICAgIGlmIChhY3RpdmUpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LCBJU19BQ1RJVkUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudCwgSVNfQUNUSVZFKTtcbiAgICB9XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcIm1kbC10b29sdGlwXCIsXG4gIHRlbXBsYXRlOiBcIjxkaXY+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvZGl2PlwiLFxuICBleHBvcnRBczogXCJtZGxUb29sdGlwXCIsXG4gIHByb3ZpZGVyczogW01kbFRvb2x0aXBQb3NpdGlvblNlcnZpY2VdLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxufSlcbmV4cG9ydCBjbGFzcyBNZGxUb29sdGlwQ29tcG9uZW50IGV4dGVuZHMgTWRsU2ltcGxlVG9vbHRpcENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIGVsUmVmOiBFbGVtZW50UmVmLFxuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgbWRsVG9vbHRpcFBvc2l0aW9uU2VydmljZTogTWRsVG9vbHRpcFBvc2l0aW9uU2VydmljZVxuICApIHtcbiAgICBzdXBlcihlbFJlZiwgcmVuZGVyZXIsIG1kbFRvb2x0aXBQb3NpdGlvblNlcnZpY2UpO1xuICB9XG59XG4iXX0=