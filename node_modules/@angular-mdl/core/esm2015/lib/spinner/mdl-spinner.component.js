import { Component, HostBinding, Input, ViewEncapsulation, } from "@angular/core";
import { toBoolean } from "../common/boolean-property";
export class MdlSpinnerComponent {
    constructor() {
        this.isSpinner = true;
        this.isUpgraded = true;
        this.layers = [1, 2, 3, 4];
        this.activeIntern = false;
        this.singleColorIntern = false;
    }
    get active() {
        return this.activeIntern;
    }
    set active(value) {
        this.activeIntern = toBoolean(value);
    }
    get singleColor() {
        return this.singleColorIntern;
    }
    set singleColor(value) {
        this.singleColorIntern = toBoolean(value);
    }
}
MdlSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-spinner",
                template: `
    <div
      *ngFor="let layer of layers"
      class="mdl-spinner__layer mdl-spinner__layer-{{ layer }}"
    >
      <div class="mdl-spinner__circle-clipper mdl-spinner__left">
        <div class="mdl-spinner__circle"></div>
      </div>
      <div class="mdl-spinner__gap-patch">
        <div class="mdl-spinner__circle"></div>
      </div>
      <div class="mdl-spinner__circle-clipper mdl-spinner__right">
        <div class="mdl-spinner__circle"></div>
      </div>
    </div>
  `,
                encapsulation: ViewEncapsulation.None
            },] }
];
MdlSpinnerComponent.propDecorators = {
    isSpinner: [{ type: HostBinding, args: ["class.mdl-spinner",] }],
    isUpgraded: [{ type: HostBinding, args: ["class.is-upgraded",] }],
    active: [{ type: HostBinding, args: ["class.is-active",] }, { type: Input }],
    singleColor: [{ type: HostBinding, args: ["class.mdl-spinner--single-color",] }, { type: Input, args: ["single-color",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRsLXNwaW5uZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvbGliL3NwaW5uZXIvbWRsLXNwaW5uZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsV0FBVyxFQUNYLEtBQUssRUFDTCxpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBc0J2RCxNQUFNLE9BQU8sbUJBQW1CO0lBcEJoQztRQXNCRSxjQUFTLEdBQUcsSUFBSSxDQUFDO1FBR2pCLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFFbEIsV0FBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDZCxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUNyQixzQkFBaUIsR0FBRyxLQUFLLENBQUM7SUFxQnBDLENBQUM7SUFuQkMsSUFFSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxLQUFjO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxJQUVJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztJQUNoQyxDQUFDO0lBRUQsSUFBSSxXQUFXLENBQUMsS0FBYztRQUM1QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUM7OztZQWpERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7O0dBZVQ7Z0JBQ0QsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7YUFDdEM7Ozt3QkFFRSxXQUFXLFNBQUMsbUJBQW1CO3lCQUcvQixXQUFXLFNBQUMsbUJBQW1CO3FCQU8vQixXQUFXLFNBQUMsaUJBQWlCLGNBQzdCLEtBQUs7MEJBU0wsV0FBVyxTQUFDLGlDQUFpQyxjQUM3QyxLQUFLLFNBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gXCIuLi9jb21tb24vYm9vbGVhbi1wcm9wZXJ0eVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwibWRsLXNwaW5uZXJcIixcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2XG4gICAgICAqbmdGb3I9XCJsZXQgbGF5ZXIgb2YgbGF5ZXJzXCJcbiAgICAgIGNsYXNzPVwibWRsLXNwaW5uZXJfX2xheWVyIG1kbC1zcGlubmVyX19sYXllci17eyBsYXllciB9fVwiXG4gICAgPlxuICAgICAgPGRpdiBjbGFzcz1cIm1kbC1zcGlubmVyX19jaXJjbGUtY2xpcHBlciBtZGwtc3Bpbm5lcl9fbGVmdFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibWRsLXNwaW5uZXJfX2NpcmNsZVwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibWRsLXNwaW5uZXJfX2dhcC1wYXRjaFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibWRsLXNwaW5uZXJfX2NpcmNsZVwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibWRsLXNwaW5uZXJfX2NpcmNsZS1jbGlwcGVyIG1kbC1zcGlubmVyX19yaWdodFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibWRsLXNwaW5uZXJfX2NpcmNsZVwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIGAsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG59KVxuZXhwb3J0IGNsYXNzIE1kbFNwaW5uZXJDb21wb25lbnQge1xuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5tZGwtc3Bpbm5lclwiKVxuICBpc1NwaW5uZXIgPSB0cnVlO1xuXG4gIEBIb3N0QmluZGluZyhcImNsYXNzLmlzLXVwZ3JhZGVkXCIpXG4gIGlzVXBncmFkZWQgPSB0cnVlO1xuXG4gIGxheWVycyA9IFsxLCAyLCAzLCA0XTtcbiAgcHJpdmF0ZSBhY3RpdmVJbnRlcm4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBzaW5nbGVDb2xvckludGVybiA9IGZhbHNlO1xuXG4gIEBIb3N0QmluZGluZyhcImNsYXNzLmlzLWFjdGl2ZVwiKVxuICBASW5wdXQoKVxuICBnZXQgYWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZUludGVybjtcbiAgfVxuXG4gIHNldCBhY3RpdmUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmFjdGl2ZUludGVybiA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5tZGwtc3Bpbm5lci0tc2luZ2xlLWNvbG9yXCIpXG4gIEBJbnB1dChcInNpbmdsZS1jb2xvclwiKVxuICBnZXQgc2luZ2xlQ29sb3IoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc2luZ2xlQ29sb3JJbnRlcm47XG4gIH1cblxuICBzZXQgc2luZ2xlQ29sb3IodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnNpbmdsZUNvbG9ySW50ZXJuID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxufVxuIl19