import { Directive, ElementRef, Input, Renderer2, } from "@angular/core";
import { MaterialRipple } from "./ripple.vendor";
const RIPPLE = "mdl-ripple";
// known bugs: https://github.com/google/material-design-lite/issues/4215
export class MdlRippleDirective {
    constructor(elementRef, renderer, cssContainerClasses) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.cssContainerClasses = cssContainerClasses;
        this.rippleActive = true;
        this.el = elementRef.nativeElement;
    }
    ngOnChanges() {
        // remove any existing ripple container
        if (this.rippleContainer) {
            this.el.removeChild(this.rippleContainer);
            delete this.rippleContainer;
            delete this.ripple;
        }
        // if used as mdl-ripple without property binding it is an empty string
        // otherwise (e.g. [mdl-ripple] it is a boolean - may be with the default value true.
        if (this.rippleActive === "" || this.rippleActive) {
            this.rippleContainer = this.renderer.createElement("span");
            this.cssContainerClasses.forEach((cssClass) => {
                this.renderer.addClass(this.rippleContainer, cssClass);
            });
            const rippleElement = this.renderer.createElement("span");
            this.renderer.addClass(rippleElement, RIPPLE);
            this.rippleContainer.appendChild(rippleElement);
            this.el.appendChild(this.rippleContainer);
            this.ripple = new MaterialRipple(this.renderer, this.el);
        }
    }
}
MdlRippleDirective.decorators = [
    { type: Directive }
];
MdlRippleDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Array }
];
export class MdlButtonRippleDirective extends MdlRippleDirective {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, ["mdl-button__ripple-container"]);
        // eslint-disable-next-line
        this.rippleActive = true;
    }
}
MdlButtonRippleDirective.decorators = [
    { type: Directive, args: [{
                // eslint-disable-next-line
                selector: 'mdl-button[mdl-ripple], button[mdl-ripple]'
            },] }
];
MdlButtonRippleDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
MdlButtonRippleDirective.propDecorators = {
    rippleActive: [{ type: Input, args: ['mdl-ripple',] }]
};
export class MdlCheckboxRippleDirective extends MdlRippleDirective {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, [
            "mdl-checkbox__ripple-container",
            "mdl-ripple--center",
        ]);
        // eslint-disable-next-line
        this.rippleActive = true;
    }
}
MdlCheckboxRippleDirective.decorators = [
    { type: Directive, args: [{
                // eslint-disable-next-line
                selector: 'mdl-checkbox[mdl-ripple]'
            },] }
];
MdlCheckboxRippleDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
MdlCheckboxRippleDirective.propDecorators = {
    rippleActive: [{ type: Input, args: ['mdl-ripple',] }]
};
export class MdlRadioRippleDirective extends MdlRippleDirective {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, [
            "mdl-radio__ripple-container",
            "mdl-ripple--center",
        ]);
        // eslint-disable-next-line
        this.rippleActive = true;
    }
}
MdlRadioRippleDirective.decorators = [
    { type: Directive, args: [{
                // eslint-disable-next-line
                selector: 'mdl-radio[mdl-ripple]'
            },] }
];
MdlRadioRippleDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
MdlRadioRippleDirective.propDecorators = {
    rippleActive: [{ type: Input, args: ['mdl-ripple',] }]
};
export class MdlIconToggleRippleDirective extends MdlRippleDirective {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, [
            "mdl-icon-toggle__ripple-container",
            "mdl-ripple--center",
        ]);
        // eslint-disable-next-line
        this.rippleActive = true;
    }
}
MdlIconToggleRippleDirective.decorators = [
    { type: Directive, args: [{
                // eslint-disable-next-line
                selector: 'mdl-icon-toggle[mdl-ripple]'
            },] }
];
MdlIconToggleRippleDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
MdlIconToggleRippleDirective.propDecorators = {
    rippleActive: [{ type: Input, args: ['mdl-ripple',] }]
};
export class MdlSwitchRippleDirective extends MdlRippleDirective {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, [
            "mdl-switch__ripple-container",
            "mdl-ripple--center",
        ]);
        // eslint-disable-next-line
        this.rippleActive = true;
    }
}
MdlSwitchRippleDirective.decorators = [
    { type: Directive, args: [{
                // eslint-disable-next-line
                selector: 'mdl-switch[mdl-ripple]'
            },] }
];
MdlSwitchRippleDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
MdlSwitchRippleDirective.propDecorators = {
    rippleActive: [{ type: Input, args: ['mdl-ripple',] }]
};
export class MdlMenuItemRippleDirective extends MdlRippleDirective {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, ["mdl-menu__item--ripple-container"]);
        // eslint-disable-next-line
        this.rippleActive = true;
    }
}
MdlMenuItemRippleDirective.decorators = [
    { type: Directive, args: [{
                // eslint-disable-next-line
                selector: 'mdl-menu-item[mdl-ripple]'
            },] }
];
MdlMenuItemRippleDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
MdlMenuItemRippleDirective.propDecorators = {
    rippleActive: [{ type: Input, args: ['mdl-ripple',] }]
};
export class MdlAnchorRippleDirective extends MdlRippleDirective {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, [
            "mdl-tabs__ripple-container",
            "mdl-layout__tab-ripple-container",
        ]);
        // eslint-disable-next-line
        this.rippleActive = true;
    }
}
MdlAnchorRippleDirective.decorators = [
    { type: Directive, args: [{
                // eslint-disable-next-line
                selector: 'a[mdl-ripple],div[mdl-ripple]'
            },] }
];
MdlAnchorRippleDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
MdlAnchorRippleDirective.propDecorators = {
    rippleActive: [{ type: Input, args: ['mdl-ripple',] }]
};
//# sourceMappingURL=data:application/json;base64,