import { Component, ElementRef, forwardRef, HostBinding, HostListener, Input, Renderer2, ViewChild, ViewEncapsulation, } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { toBoolean } from "../common/boolean-property";
import { noop } from "../common/noop";
import { callNative } from "../common/native-support";
export class MdlSliderComponent {
    constructor(renderer, elRef) {
        this.renderer = renderer;
        this.elRef = elRef;
        this.isSliderContainer = true;
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this.disabledIntern = false;
    }
    get disabled() {
        return this.disabledIntern;
    }
    set disabled(value) {
        this.disabledIntern = toBoolean(value);
    }
    get value() {
        return this.valueIntern;
    }
    set value(v) {
        this.valueIntern = v;
        this.updateSliderUI();
        this.onChangeCallback(v);
    }
    onMouseUp(event) {
        event.target.blur();
    }
    onMouseDown(event) {
        if (event.target !== this.elRef.nativeElement) {
            return;
        }
        // Discard the original event and create a new event that
        // is on the slider element.
        event.preventDefault();
        const newEvent = new MouseEvent("mousedown", {
            relatedTarget: event.relatedTarget,
            button: event.button,
            buttons: event.buttons,
            clientX: event.clientX,
            clientY: this.inputEl.nativeElement.getBoundingClientRect().y,
            screenX: event.screenX,
            screenY: event.screenY,
        });
        callNative(this.inputEl.nativeElement, "dispatchEvent", newEvent);
    }
    ngAfterViewInit() {
        this.updateSliderUI();
    }
    writeValue(value) {
        this.valueIntern = value;
        this.updateSliderUI();
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    updateSliderUI() {
        // if the input hat a static value (for example value="30"
        // the setvalue method is called before the ViewChilds are initialized
        // this has changed in Angular 9! :(
        if (!this.inputEl) {
            return;
        }
        const fraction = (this.valueIntern - this.min) / (this.max - this.min);
        if (fraction === 0) {
            this.renderer.addClass(this.inputEl.nativeElement, "is-lowest-value");
        }
        else {
            this.renderer.removeClass(this.inputEl.nativeElement, "is-lowest-value");
        }
        this.renderer.setStyle(this.lowerEl.nativeElement, "flex", "" + fraction);
        this.renderer.setStyle(this.upperEl.nativeElement, "flex", "" + (1 - fraction));
    }
}
MdlSliderComponent.decorators = [
    { type: Component, args: [{
                selector: "mdl-slider",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => MdlSliderComponent),
                        multi: true,
                    },
                ],
                template: `
    <input
      class="mdl-slider is-upgraded"
      type="range"
      [min]="min"
      [max]="max"
      [step]="step"
      [(ngModel)]="value"
      [disabled]="disabled"
      tabindex="0"
      #input
    />
    <div class="mdl-slider__background-flex">
      <div class="mdl-slider__background-lower" #lower></div>
      <div class="mdl-slider__background-upper" #uppper></div>
    </div>
  `,
                encapsulation: ViewEncapsulation.None,
                styles: [`
      :host {
        height: 22px;
        user-select: none;
        -webkit-user-select: none;
        -moz-user-select: none;
      }
    `]
            },] }
];
MdlSliderComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
MdlSliderComponent.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    step: [{ type: Input }],
    lowerEl: [{ type: ViewChild, args: ["lower", { static: true },] }],
    upperEl: [{ type: ViewChild, args: ["uppper", { static: true },] }],
    inputEl: [{ type: ViewChild, args: ["input", { static: true },] }],
    isSliderContainer: [{ type: HostBinding, args: ["class.mdl-slider__container",] }],
    disabled: [{ type: Input }],
    value: [{ type: Input }],
    onMouseUp: [{ type: HostListener, args: ["mouseup", ["$event"],] }],
    onMouseDown: [{ type: HostListener, args: ["mousedown", ["$event"],] }]
};
//# sourceMappingURL=data:application/json;base64,