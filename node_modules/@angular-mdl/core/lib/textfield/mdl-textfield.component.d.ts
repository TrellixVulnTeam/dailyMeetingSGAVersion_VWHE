import { DoCheck, ElementRef, EventEmitter, InjectionToken, OnChanges, Renderer2 } from "@angular/core";
import { ControlValueAccessor } from "@angular/forms";
export declare const DISABLE_NATIVE_VALIDITY_CHECKING: InjectionToken<boolean>;
export declare class MdlTextFieldComponent implements ControlValueAccessor, OnChanges, DoCheck {
    private renderer;
    private elmRef;
    private nativeCheckGlobalDisabled;
    blurEmitter: EventEmitter<FocusEvent>;
    focusEmitter: EventEmitter<FocusEvent>;
    keyupEmitter: EventEmitter<KeyboardEvent>;
    inputEl: ElementRef;
    type: string;
    label: any;
    pattern: any;
    min: any;
    max: any;
    step: any;
    name: any;
    id: string;
    errorMessage: any;
    placeholder: string;
    autocomplete: string;
    icon: string;
    tabindex: number;
    maxlength: number;
    isTextfield: boolean;
    isUpgraded: boolean;
    private valueIntern;
    private readonly el;
    private onTouchedCallback;
    private onChangeCallback;
    private disabledIntern;
    private readonlyIntern;
    private requiredIntern;
    private autofocusIntern;
    private isFloatingLabelIntern;
    private rowsIntern;
    private maxrowsIntern;
    private disableNativeValidityCheckingIntern;
    constructor(renderer: Renderer2, elmRef: ElementRef, nativeCheckGlobalDisabled: boolean);
    get value(): string | number;
    set value(v: string | number);
    get disabled(): boolean;
    set disabled(value: boolean);
    get readonly(): boolean;
    set readonly(value: boolean);
    get required(): boolean;
    set required(value: boolean);
    get autofocus(): boolean;
    set autofocus(value: boolean);
    get isFloatingLabel(): boolean;
    set isFloatingLabel(value: boolean);
    get rows(): number;
    set rows(value: number);
    get maxrows(): number;
    set maxrows(value: number);
    get disableNativeValidityChecking(): boolean;
    set disableNativeValidityChecking(value: boolean);
    writeValue(value: string | number): void;
    registerOnChange(fn: () => unknown): void;
    registerOnTouched(fn: () => unknown): void;
    setDisabledState(isDisabled: boolean): void;
    ngOnChanges(): void;
    ngDoCheck(): void;
    setFocus(): void;
    keydownTextarea($event: KeyboardEvent): void;
    triggerChange(event: Event): void;
    onFocus(event: FocusEvent): void;
    onBlur(event: FocusEvent): void;
    onKeyup(event: KeyboardEvent): void;
    private checkDisabled;
    private checkValidity;
    private checkDirty;
}
