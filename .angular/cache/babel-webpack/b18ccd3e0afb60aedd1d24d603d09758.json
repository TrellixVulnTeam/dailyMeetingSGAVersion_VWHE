{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./service\";\nimport * as i2 from \"@angular/common\";\nexport let UsersListService = /*#__PURE__*/(() => {\n  class UsersListService {\n    constructor(service, datePipe) {\n      this.service = service;\n      this.datePipe = datePipe;\n      this.numberParticipants = 0;\n      this.appUsersMeetingList = [];\n      this.appUsersMeetingListIsPart = [];\n      this.appUsersMeetingListIsNotPart = [];\n      this.meetingStarted = false;\n      this.index = 0;\n      this.lastUser = false;\n      this.startChrono = new Date();\n      this.stopChrono = new Date();\n      this.totalTimingMinutesIntoSeconds = 0;\n      this.totalIntoSeconds = 0;\n      this.setupDuration = true;\n      this.minutes = 0;\n      this.seconds = 0;\n    }\n\n    usersListRandomlySorted() {\n      this.appUsersMeetingList.sort(() => Math.random() - 0.5);\n    }\n\n    splitParticipationOrNot() {\n      // while et slice pour injecter la liste des participants dans la liste des appUsersMeetingList\n      while (this.appUsersMeetingList.length > 0) {\n        if (this.appUsersMeetingList[0].isParticipant) {\n          this.appUsersMeetingListIsPart.push(this.appUsersMeetingList[0]);\n          this.appUsersMeetingList.splice(0, 1);\n        } else {\n          this.appUsersMeetingListIsNotPart.push(this.appUsersMeetingList[0]);\n          this.appUsersMeetingList.splice(0, 1);\n        }\n      }\n\n      this.appUsersMeetingList = this.appUsersMeetingListIsPart;\n    } // I catch the minutes converted into seconds\n    // @ts-ignore\n\n\n    totalMinute($event) {\n      this.minutes = 0;\n      this.totalTimingMinutesIntoSeconds = 0;\n      this.totalTimingMinutesIntoSeconds = $event.target.value * 60;\n      console.log(this.totalTimingMinutesIntoSeconds);\n      this.ComputeTotalTime();\n    } // I catch the seconds\n    // @ts-ignore\n\n\n    totalSeconds($event) {\n      this.totalIntoSeconds = 0;\n      this.totalIntoSeconds = $event.target.value;\n      this.ComputeTotalTime();\n    }\n\n    ComputeTotalTime() {\n      // count number of participants\n      this.numberParticipants = 0;\n\n      for (const appUser of this.appUsersMeetingList) {\n        if (appUser.isParticipant === true) {\n          this.numberParticipants = this.numberParticipants + 1;\n        }\n      }\n\n      let totalTimingintoSec = 0;\n      console.log(\"total minutes into seconds : \" + this.totalTimingMinutesIntoSeconds);\n      console.log(\"total Into Seconds : \" + this.totalIntoSeconds);\n      totalTimingintoSec = (+this.totalTimingMinutesIntoSeconds + +this.totalIntoSeconds) * +this.numberParticipants;\n      console.log(totalTimingintoSec);\n      this.minutes = Math.floor(totalTimingintoSec / 60);\n      this.seconds = totalTimingintoSec - this.minutes * 60;\n      totalTimingintoSec = 0;\n    }\n\n    initialisationUsersList() {\n      this.service.getLastMeeting().subscribe(lastMeeting => this.service.getAllParticipationsByMeetingId(lastMeeting.id).subscribe(participationList => // inject the list of all users actives into a new list of new objects : AppUser\n      this.service.getAppUsersList().subscribe(appUsersList => {\n        for (let appUser of appUsersList) {\n          this.appUsersMeetingList.push({\n            \"id\": appUser.id,\n            \"name\": appUser.name,\n            \"isParticipant\": false,\n            \"isSpeaking\": 0,\n            \"timeKeeper\": false\n          });\n        }\n\n        this.dateMeeting = this.datePipe.transform(lastMeeting.date, 'dd/MM/yyyy'); // Update \"isParticpant\" and \"isTimeKeeper\" in the appUsersMeetingList from th BDD\n        // @ts-ignore\n\n        for (let participation of participationList) {\n          this.appUserMeeting = this.appUsersMeetingList.find(appUserMeeting => appUserMeeting.id === participation.appUser.id); // @ts-ignore\n\n          this.appUserMeeting.isParticipant = true; // @ts-ignore\n\n          this.appUserMeeting.timeKeeper = participation.timeKeeper;\n        }\n      })));\n    }\n\n  }\n\n  UsersListService.ɵfac = function UsersListService_Factory(t) {\n    return new (t || UsersListService)(i0.ɵɵinject(i1.Service), i0.ɵɵinject(i2.DatePipe));\n  };\n\n  UsersListService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsersListService,\n    factory: UsersListService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsersListService;\n})();","map":null,"metadata":{},"sourceType":"module"}