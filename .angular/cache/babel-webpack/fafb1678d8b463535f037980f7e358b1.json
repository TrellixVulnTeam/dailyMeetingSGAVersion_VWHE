{"ast":null,"code":"import { timer } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service\";\nimport * as i2 from \"../users-list.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ngx-countdown\";\nconst _c0 = [\"countdown\"];\n\nfunction MeetingBoardComponent_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function MeetingBoardComponent_button_9_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.startMeeting();\n    });\n    i0.ɵɵtext(1, \"Start a meeting\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction MeetingBoardComponent_div_11_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function MeetingBoardComponent_div_11_button_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.start();\n    });\n    i0.ɵɵtext(1, \" Start the timer \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction MeetingBoardComponent_div_11_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function MeetingBoardComponent_div_11_div_11_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.startAfterBreak();\n    });\n    i0.ɵɵtext(2, \" Restart\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    leftTime: a0,\n    demand: true\n  };\n};\n\nfunction MeetingBoardComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵelementStart(1, \"div\", 12);\n    i0.ɵɵelement(2, \"img\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"countdown\", 14, 15);\n    i0.ɵɵelementStart(6, \"div\");\n    i0.ɵɵtemplate(7, MeetingBoardComponent_div_11_button_7_Template, 2, 0, \"button\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"p\");\n    i0.ɵɵelementStart(9, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function MeetingBoardComponent_div_11_Template_button_click_9_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.Pause();\n    });\n    i0.ɵɵtext(10, \" Pause \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, MeetingBoardComponent_div_11_div_11_Template, 3, 0, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" => \", ctx_r1.currentSpeaker.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"config\", i0.ɵɵpureFunction1(4, _c1, ctx_r1.totalSpeakingDuration));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.startMeetingButton === true);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.displayAfterBreak === false);\n  }\n}\n\nfunction MeetingBoardComponent_button_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function MeetingBoardComponent_button_14_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.nextSpeaker();\n    });\n    i0.ɵɵtext(1, \"Next\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction MeetingBoardComponent_button_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function MeetingBoardComponent_button_16_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.endMeeting();\n    });\n    i0.ɵɵtext(1, \"End Meeting\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction MeetingBoardComponent_button_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 17);\n    i0.ɵɵtext(1, \"Meeting Finished\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let MeetingBoardComponent = /*#__PURE__*/(() => {\n  class MeetingBoardComponent {\n    constructor(service, usersListService) {\n      this.service = service;\n      this.usersListService = usersListService;\n      this.displayAfterBreak = true;\n      this.startMeetingButton = true; //lastUser = false ;\n      //meetingStarted = false;\n\n      this.launchTheChrono = true;\n      this.totalSpeakingDuration = 0;\n      this.currentSpeaker = {\n        id: 0,\n        name: \"test\",\n        isParticipant: true,\n        isSpeaking: 0,\n        timeKeeper: true\n      };\n      this.currTime = 0;\n      this.obsTimer = timer(0, 1000);\n    }\n\n    ngOnInit() {}\n\n    startMeeting() {\n      this.usersListService.meetingStarted = true; // localStorage.setItem(\"isMeetingStarted\", JSON.stringify(this.usersListService.meetingStarted));\n      // let unTest = localStorage.getItem(\"isMeetingStarted\")\n\n      this.usersListService.splitParticipationOrNot(); //générer la liste aléatoire de participants\n\n      this.usersListService.usersListRandomlySorted(); // afficher le premier participant dans le componant meeting board\n\n      this.currentSpeaker = this.usersListService.appUsersMeetingList[this.usersListService.index];\n      this.subscription = this.obsTimer.subscribe(currTime => this.currTime = currTime);\n      this.usersListService.startChrono = new Date(); // afficher le countdown par participant\n\n      this.totalSpeakingDuration = +this.usersListService.totalIntoSeconds + +this.usersListService.totalTimingMinutesIntoSeconds;\n      this.resetTimer();\n      this.start();\n      this.startMeetingButton = true;\n    }\n\n    nextSpeaker() {\n      var _a; // Récupérer le dernier speaking Duration\n\n\n      (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n      this.usersListService.stopChrono = new Date();\n      let speakingDuration = Math.round((this.usersListService.stopChrono.getTime() - this.usersListService.startChrono.getTime()) / 1000);\n      this.service.getLastMeeting().subscribe(lastMeeting => {\n        this.service.getAppUsersList().subscribe(AppUsersList => {\n          let appUser = AppUsersList.find(appUser => appUser.id === this.currentSpeaker.id);\n          this.service.getParticipationBymeetingIdAndAppuserId(lastMeeting.id, this.currentSpeaker.id).subscribe(participation => {\n            let participationToUpdate = {\n              \"appUser\": appUser,\n              \"id\": participation.id,\n              \"meeting\": lastMeeting,\n              \"speakingDuration\": speakingDuration,\n              \"timeKeeper\": this.currentSpeaker.timeKeeper\n            };\n            this.service.updateParticipation(participationToUpdate).subscribe(); // Save speaking duration in appUserMeeting of AppUsersMeetingList\n            // @ts-ignore\n\n            this.usersListService.appUsersMeetingList.find(appUserMeeting => appUserMeeting.id === this.currentSpeaker.id).isSpeaking = participationToUpdate.speakingDuration;\n            console.log(participation.id + \" ==>\" + participationToUpdate.speakingDuration); // Changer le currentSpeaker\n\n            if (this.usersListService.index == this.usersListService.appUsersMeetingList.length - 1) {\n              this.currentSpeaker = this.usersListService.appUsersMeetingList[this.usersListService.index];\n            } else {\n              this.usersListService.index = this.usersListService.index + 1;\n              this.currentSpeaker = this.usersListService.appUsersMeetingList[this.usersListService.index];\n            } // Changer le bouton Next à EndMeeting\n\n\n            if (this.usersListService.index == this.usersListService.appUsersMeetingList.length - 1) {\n              this.usersListService.lastUser = true;\n            } // Réinitialiser le chrono pour le prochain participant\n\n\n            this.subscription = this.obsTimer.subscribe(currTime => this.currTime = currTime);\n            this.usersListService.startChrono = new Date();\n            console.log(this.totalSpeakingDuration);\n            this.resetTimer();\n            this.start();\n          });\n        });\n      }); //localStorage.setItem(this.usersListService.index);\n    } //reset du time\n\n\n    resetTimer() {\n      var _a;\n\n      (_a = this.counter) === null || _a === void 0 ? void 0 : _a.restart();\n    }\n\n    start() {\n      var _a;\n\n      (_a = this.counter) === null || _a === void 0 ? void 0 : _a.begin();\n      this.startMeetingButton = false;\n    }\n\n    Pause() {\n      var _a;\n\n      (_a = this.counter) === null || _a === void 0 ? void 0 : _a.pause();\n      this.displayAfterBreak = false;\n    }\n\n    startAfterBreak() {\n      var _a;\n\n      (_a = this.counter) === null || _a === void 0 ? void 0 : _a.begin();\n      this.displayAfterBreak = true;\n    }\n\n    endMeeting() {\n      var _a; // Récupérer le dernier speaking Duration\n\n\n      (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n      this.usersListService.stopChrono = new Date();\n      let speakingDuration = Math.round((this.usersListService.stopChrono.getTime() - this.usersListService.startChrono.getTime()) / 1000);\n      this.service.getLastMeeting().subscribe(lastMeeting => {\n        this.service.getAppUsersList().subscribe(AppUsersList => {\n          let appUser = AppUsersList.find(appUser => appUser.id === this.currentSpeaker.id);\n          this.service.getParticipationBymeetingIdAndAppuserId(lastMeeting.id, this.currentSpeaker.id).subscribe(participation => {\n            let participationToUpdate = {\n              \"appUser\": appUser,\n              \"id\": participation.id,\n              \"meeting\": lastMeeting,\n              \"speakingDuration\": speakingDuration,\n              \"timeKeeper\": this.currentSpeaker.timeKeeper\n            };\n            this.service.updateParticipation(participationToUpdate).subscribe(); // Save speaking duration in appUserMeeting of AppUsersMeetingList\n            // @ts-ignore\n\n            this.usersListService.appUsersMeetingList.find(appUserMeeting => appUserMeeting.id === this.currentSpeaker.id).isSpeaking = participationToUpdate.speakingDuration;\n            console.log(participation.id + \" ==>\" + participationToUpdate.speakingDuration);\n            this.usersListService.meetingStarted = false;\n          });\n        });\n      });\n    }\n\n  }\n\n  MeetingBoardComponent.ɵfac = function MeetingBoardComponent_Factory(t) {\n    return new (t || MeetingBoardComponent)(i0.ɵɵdirectiveInject(i1.Service), i0.ɵɵdirectiveInject(i2.UsersListService));\n  };\n\n  MeetingBoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MeetingBoardComponent,\n    selectors: [[\"app-meeting-board\"]],\n    viewQuery: function MeetingBoardComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.counter = _t.first);\n      }\n    },\n    decls: 19,\n    vars: 5,\n    consts: [[\"rel\", \"stylesheet\", \"href\", \"https://code.getmdl.io/1.1.3/material.indigo-pink.min.css\"], [\"href\", \"https://fonts.googleapis.com/icon?family=Material+Icons\", \"rel\", \"stylesheet\"], [\"rel\", \"stylesheet\", \"href\", \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\", \"integrity\", \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\", \"crossorigin\", \"anonymous\"], [1, \"container\", \"mr-0\"], [1, \"justify-content-center\"], [1, \"d-flex\", \"flex-column\", \"align-items-center\"], [1, \"mt-5\"], [\"class\", \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"border border-dark px-5 py-2 bg-light text-center mt-5\", 4, \"ngIf\"], [\"class\", \"startMeetingButton mt-5\", 4, \"ngIf\"], [1, \"mdl-button\", \"mdl-js-button\", \"mdl-button--raised\", \"mdl-button--colored\", 3, \"click\"], [1, \"border\", \"border-dark\", \"px-5\", \"py-2\", \"bg-light\", \"text-center\", \"mt-5\"], [1, \"h3\"], [\"src\", \"assets/micro2.png\", \"id\", \"logoMicro\"], [3, \"config\"], [\"countdown\", \"\"], [4, \"ngIf\"], [1, \"startMeetingButton\", \"mt-5\"]],\n    template: function MeetingBoardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"head\");\n        i0.ɵɵelement(1, \"link\", 0);\n        i0.ɵɵelement(2, \"link\", 1);\n        i0.ɵɵelement(3, \"link\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"body\");\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵelementStart(8, \"div\", 6);\n        i0.ɵɵtemplate(9, MeetingBoardComponent_button_9_Template, 2, 0, \"button\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\");\n        i0.ɵɵtemplate(11, MeetingBoardComponent_div_11_Template, 12, 6, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\");\n        i0.ɵɵelement(13, \"p\");\n        i0.ɵɵtemplate(14, MeetingBoardComponent_button_14_Template, 2, 0, \"button\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\");\n        i0.ɵɵtemplate(16, MeetingBoardComponent_button_16_Template, 2, 0, \"button\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 6);\n        i0.ɵɵtemplate(18, MeetingBoardComponent_button_18_Template, 2, 0, \"button\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", ctx.usersListService.meetingStarted == false && ctx.usersListService.lastUser == false);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.usersListService.meetingStarted == true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.usersListService.meetingStarted == true && ctx.usersListService.lastUser == false);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.usersListService.meetingStarted == true && ctx.usersListService.lastUser == true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.usersListService.meetingStarted == false && ctx.usersListService.lastUser == true);\n      }\n    },\n    directives: [i3.NgIf, i4.CountdownComponent],\n    styles: [\".startMeetingButton[_ngcontent-%COMP%]{width:300px;height:75px;background:#f8f9fa;border:2px solid #000000;box-sizing:border-box;box-shadow:0 4px 4px #00000040;font-size:medium}#logoMicro[_ngcontent-%COMP%]{height:25px}\"]\n  });\n  return MeetingBoardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}